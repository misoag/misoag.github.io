<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>References: Modifier &amp; and Keyword this</title>
<meta name="keywords" content="this">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "this.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=this.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=this.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="types.htm">Data Types</a> / References: Modifier &amp;
and Keyword this</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="object_pointers.htm"><img style="vertical-align:middle;"
src="previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="operations.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">References: Modifier &amp; and
Keyword this</span>
</p>

<p class="p_H2"><span class="f_H2">Passing Parameters by
Reference</span>
</p>

<p class="p_Text"><span class="f_Text">In MQL5 parameters of
<a href="types.htm#base_types" class="topiclink">simple</a> types
can be passed both by value and by reference, while parameters of
<a href="types.htm#complex_types" class="topiclink">compound</a>
types are always passed by reference. To inform the compiler that a
parameter must be passed by reference, the ampersand
character</span> <span class="f_Text" style=
"font-weight: bold;">&amp;</span> <span class="f_Text">is added
before the parameter name</span><span class="f_Text" style=
"font-family: Tahoma;">.</span></p>

<p class="p_Text"><span class="f_Text">Passing a parameter by
reference means passing the address of the variable, that's why all
changes in the parameter that is passed by reference will be
immediately reflected in the source variable. Using parameter
passing by reference, you can implement return of several results
of a function at the same time. In order to prevent changing of a
parameter passed by reference, use the <a href=
"variables.htm#const" class="topiclink">const</a> modifier.</span>
</p>

<p class="p_Text"><span class="f_Text">Thus, if the input parameter
of a function is an <a href="variables.htm#array_define" class=
"topiclink">array</a>, a structure or class object, symbol
'</span><span class="f_Text" style=
"font-family: Tahoma;">&amp;</span><span class="f_Text">' is placed
in the function header after the variable type and before its
name.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CDemoClass</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_array[];</span><br>

<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setArray(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&amp;array[]);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;filling&nbsp;the&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;CDemoClass::setArray(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&amp;array[])</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(array)&gt;0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_array,</span><span class="f_CodeExample" style=
"color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(array));</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayCopy</span><span class="f_CodeExample">(m_array,&nbsp;array);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">In the above example
<a href="classes.htm#class" class="topiclink">class</a> CDemoClass
is declared, which contains the <a href="variables.htm#private"
class="topiclink">private</a> member - array m_array[] of <a href=
"double.htm" class="topiclink">double</a> type. <a href=
"function.htm" class="topiclink">Function</a> setArray() is
declared, to which array[] is passed by reference. If the function
header doesn't contain the indication about passing by reference,
i.e. doesn't contain the ampersand character, an error message will
be generated at the attempt to compile such a code.</span>
</p>

<p class="p_Text"><span class="f_Text">Despite the fact that the
array is passed by reference, we can't assign one array to another.
We need to perform the element-wise copying of contents of the
source array to the recipient array. The presence of</span>
<span class="f_Text" style="font-family: Tahoma;">&amp;</span>
<span class="f_Text">in the function description is the obligatory
condition for arrays and structures when passed as the function
parameter.</span></p>

<p class="p_H2"><span class="f_H2">Keyword this</span>
</p>

<p class="p_Text"><span class="f_Text">A variable of class type
(object) can be passed both by reference and by <a href=
"object_pointers.htm" class="topiclink">pointer</a>. As well as
reference, the pointer allows having access to an object. After the
object pointer is declared, the <a href="newoperator.htm" class=
"topiclink">new</a> operator should be applied to it to create and
initialize it.</span>
</p>

<p class="p_Text"><span class="f_Text">The reserved word</span>
<span class="f_Text" style="font-weight: bold;">this</span>
<span class="f_Text">is intended for obtaining the reference of the
object to itself, which is available inside class or structure
methods.</span> <span class="f_Text" style=
"font-weight: bold;">this</span> <span class="f_Text">always
references to the object, in the method of which it is used, and
the expression <a href="getpointer.htm" class=
"topiclink">GetPointer</a>(this) gives the pointer of the object,
whose member is the function, in which call of GetPointer() is
performed. In MQL5 functions can't return objects, but they can
return the object pointer.</span></p>

<p class="p_Text"><span class="f_Text">Thus, if we need a function
to return an object, we can return the pointer of this object in
the form of GetPointer(this). Let's add function getDemoClass()
that returns pointer of the object of this class, into the
description of CDemoClass.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CDemoClass</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_array[];</span><br>

<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setArray(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&amp;array[]);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CDemoClass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*getDemoClass();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;filling&nbsp;the&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;CDemoClass::setArray(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&amp;array[])</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(array)&gt;0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_array,</span><span class="f_CodeExample" style=
"color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(array));</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">ArrayCopy</span><span class=
"f_CodeExample">(m_array,array);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;returns&nbsp;its&nbsp;own&nbsp;pointer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">CDemoClass&nbsp;*CDemoClass::getDemoClass(</span><span class="f_CodeExample"
style="color: #0000ff;">void</span><span class=
"f_CodeExample">)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">GetPointer</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">this</span><span class=
"f_CodeExample">));</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Structures don't have
pointers, operators</span> <span class="f_Text" style=
"font-style: italic;">new</span> <span class="f_Text">and</span>
<span class="f_Text" style="font-style: italic;">delete</span>
<span class="f_Text">can't be applied to them, GetPointer(this)
can't be used</span><span class="f_Text" style=
"font-style: italic;">.</span></p>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href=
"object_pointers.htm" class="topiclink">Object Pointers</a>,
<a href="object_live.htm" class="topiclink">Creating and Deleting
Objects</a>, <a href="variable_scope.htm" class=
"topiclink">Visibility Scope and Lifetime of Variables</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
