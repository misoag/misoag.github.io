<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Passing Parameters</title>
<meta name="keywords" content="">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "parameterpass.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=parameterpass.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=parameterpass.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="function.htm">Functions</a> / Passing Parameters</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="call.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="functionoverload.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Passing Parameters</span>
</p>

<p class="p_Text"><span class="f_Text">There are two methods, by
which the machine language can pass arguments to a subprogram
(function). The first method is to send a parameter by value. This
method copies the <a href="call.htm#argument" class=
"topiclink">argument</a> value into a formal function parameter.
Therefore, any changes in this parameter within the function have
no influence on the corresponding call argument.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Passing&nbsp;parameters&nbsp;by&nbsp;value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;FirstMethod(</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i,</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;j)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;res;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;i*=2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;j/=2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;res=i+j;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;a=14,b=8;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a&nbsp;and&nbsp;b&nbsp;before&nbsp;call:"</span><span class="f_CodeExample">,a,"&nbsp;",b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;d=FirstMethod(a,b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a&nbsp;and&nbsp;b&nbsp;after&nbsp;call:"</span><span class="f_CodeExample">,a,"&nbsp;",b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Result&nbsp;of&nbsp;script&nbsp;execution</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;&nbsp;a&nbsp;and&nbsp;b&nbsp;before&nbsp;call:&nbsp;14&nbsp;8</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;&nbsp;a&nbsp;and&nbsp;b&nbsp;after&nbsp;call:&nbsp;14&nbsp;8</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The second method is to pass
by reference. In this case, reference to a parameter (not its
value) is passed to a function parameter. Inside the function, it
is used to refer to the actual parameter specified in the call.
This means that the parameter changes will affect the argument used
to call the function.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Passing&nbsp;parameters&nbsp;by&nbsp;reference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;SecondMethod(</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&amp;i,</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&amp;j)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;res;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;i*=2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;j/=2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;res=i+j;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;a=14,b=8;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a&nbsp;and&nbsp;b&nbsp;before&nbsp;call:"</span><span class="f_CodeExample">,a,"&nbsp;",b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;d=SecondMethod(a,b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a&nbsp;and&nbsp;b&nbsp;after&nbsp;call:"</span><span class="f_CodeExample">,a,"&nbsp;",b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;result&nbsp;of&nbsp;script&nbsp;execution</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;&nbsp;a&nbsp;and&nbsp;b&nbsp;before&nbsp;call:&nbsp;14&nbsp;8</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;&nbsp;a&nbsp;and&nbsp;b&nbsp;after&nbsp;call:&nbsp;28&nbsp;4</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">MQL5 uses both methods, with
one exception: arrays, structure type variables and class objects
are always passed by reference. In order to avoid changes in actual
parameters (arguments passed at function call) use the access
specifier</span> <span class="f_Text"><a href="variables.htm#const"
class="topiclink">const</a></span><span class="f_Text">. When
trying to change the contents of a variable declared with
the</span> <span class="f_Text" style=
"font-style: italic;">const</span> <span class="f_Text">specifier,
the compiler will generate an error.</span></p>

<p class="p_H3"><span class="f_H3">Note</span>
</p>

<p class="p_Text"><span class="f_Text">It should be noted that
parameters are passed to a function in reversed order, i.e., first
the last parameter is calculated and passed, and then the last but
one, etc. The last calculated and passed parameter is the one that
stands first after opening parenthesis.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;a[]={0,1,2};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;func(a[i],a[i++],</span><span class="f_CodeExample"
style=
"color: #008080;">"First&nbsp;call&nbsp;(i&nbsp;=&nbsp;"</span><span class="f_CodeExample">+</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">(i)+</span><span class="f_CodeExample" style=
"color: #008080;">")"</span><span class=
"f_CodeExample">);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;func(a[i++],a[i],</span><span class="f_CodeExample"
style=
"color: #008080;">"Second&nbsp;call&nbsp;(i&nbsp;=&nbsp;"</span><span class="f_CodeExample">+</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">(i)+</span><span class="f_CodeExample" style=
"color: #008080;">")"</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;Result:</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;First&nbsp;call&nbsp;(i&nbsp;=&nbsp;0)&nbsp;:&nbsp;par1&nbsp;=&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;par2&nbsp;=&nbsp;0</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;Second&nbsp;call&nbsp;(i&nbsp;=&nbsp;1)&nbsp;:&nbsp;par1&nbsp;=&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;par2&nbsp;=&nbsp;1</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;func(</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;par1,</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;par2,</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">comment</span><span class=
"f_CodeExample">)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">comment</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #008080;">":&nbsp;par1&nbsp;=&nbsp;"</span><span class=
"f_CodeExample">,par1,</span><span class="f_CodeExample" style=
"color: #008080;">"&nbsp;&nbsp;&nbsp;&nbsp;par2&nbsp;=&nbsp;"</span><span class="f_CodeExample">,par2);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">In first call (see example
above) the</span> <span class="f_Text" style=
"font-style: italic; font-weight: bold;">i</span> <span class=
"f_Text">variable is first used in strings
concatenation:</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #008080;">&nbsp;&nbsp;"First&nbsp;call&nbsp;(i&nbsp;=&nbsp;"</span><span class="f_CodeExample">+</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">(i)+</span><span class="f_CodeExample" style=
"color: #008080;">")"</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Here its value doesn't
change. Then the</span> <span class="f_Text" style=
"font-style: italic; font-weight: bold;">i</span> <span class=
"f_Text">variable is used in calculation of the</span> <span class=
"f_Text" style=
"font-style: italic; font-weight: bold;">a[i++]</span> <span class=
"f_Text">array element</span><span class="f_Text">, i.e. when array
element with index i is accessed, the</span> <span class="f_Text"
style="font-style: italic; font-weight: bold;">i</span>
<span class="f_Text">variable is</span> <span class=
"f_Text"><a href="mathoperation.htm#posfix" class=
"topiclink">incremented</a>. And only after that the first
parameter with changed value of</span> <span class="f_Text" style=
"font-style: italic; font-weight: bold;">i</span> <span class=
"f_Text">variable is calculated.</span></p>

<p class="p_Text"><span class="f_Text">In the second call the same
value of i (calculated on the first phase of function calling) is
used when calculating all three parameters. Only after the first
parameters is calculated the</span> <span class="f_Text" style=
"font-style: italic; font-weight: bold;">i</span> <span class=
"f_Text">variable is changed again.</span></p>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href=
"variable_scope.htm" class="topiclink">Visibility Scope and
Lifetime of Variables</a>, <a href="overload.htm" class=
"topiclink">Overload</a>, <a href="virtual.htm" class=
"topiclink">Virtual Functions</a>, <a href="polymorphism.htm"
class="topiclink">Polymorphism</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
