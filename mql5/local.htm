<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Local Variables</title>
<meta name="keywords" content="">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "local.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=local.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=local.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="variables.htm">Variables</a> / Local Variables</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="variables.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="formal.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Local Variables</span>
</p>

<p class="p_Text"><span class="f_Text">A variable declared inside a
<a href="function.htm" class="topiclink">function</a> is local. The
scope of a local variable is limited to the function range inside
which it is declared. Local variable can be <a href=
"initialization.htm" class="topiclink">initialized</a> by outcome
of any <a href="expression.htm" class="topiclink">expression</a>.
Every call of the function initializes a local variable. Local
variables are stored in memory area of the corresponding
function.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;somefunc()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;ret_code=0;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;...</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(ret_code);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text"><a href="variable_scope.htm"
class="topiclink">Scope</a> of a variable is a program part, in
which a variable can referred to. Variables declared inside a block
(at the internal level), have the <a href="compound.htm" class=
"topiclink">block</a> as their scope. The block scope start with
the variable declaration and ends with the final right
brace.</span>
</p>

<p class="p_Text"><span class="f_Text">Local variables declared in
the beginning of a function also have the scope of block, as well
as <a href="call.htm#argument" class="topiclink">function
parameters</a> that are local variables. Any block can contain
variable declarations. If blocks are nested and the <a href=
"identifiers.htm" class="topiclink">identifier</a> in the external
block has the same name as the identifier in the internal block,
the external block identifier is hidden, until the operation of the
internal block is over.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;local&nbsp;variable&nbsp;of&nbsp;the&nbsp;function</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=10;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;function&nbsp;variable</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Inside&nbsp;block&nbsp;i&nbsp;=&nbsp;"</span><span class="f_CodeExample">,i);&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;result&nbsp;is&nbsp;&nbsp;i=10;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Outside&nbsp;block&nbsp;i&nbsp;=&nbsp;"</span><span class="f_CodeExample">,i);&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;result&nbsp;is&nbsp;&nbsp;i=5;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">This means that while the
internal block is running, it sees values of its own local
identifiers, not the values of identifiers with identical names in
the external block.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;local&nbsp;variable&nbsp;of&nbsp;the&nbsp;function</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;3;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Inside&nbsp;for&nbsp;i&nbsp;=&nbsp;"</span><span class="f_CodeExample">,i);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Outside&nbsp;the&nbsp;block&nbsp;i&nbsp;=&nbsp;"</span><span class="f_CodeExample">,i);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">/*&nbsp;Execution&nbsp;result</span><br>
<span class="f_CodeExample">Inside&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">&nbsp;i&nbsp;=&nbsp;0</span><br>
<span class="f_CodeExample">Inside&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">&nbsp;i&nbsp;=&nbsp;1</span><br>
<span class="f_CodeExample">Inside&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">&nbsp;i&nbsp;=&nbsp;2</span><br>
<span class=
"f_CodeExample">Outside&nbsp;block&nbsp;i&nbsp;=&nbsp;5</span><br>
<span class="f_CodeExample">*/</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Local variables declared as
<a href="static.htm" class="topiclink">static</a> have the scope of
the block, despite the fact that they exist since the program
start.</span>
</p>

<p class="p_H2"><a class="help" name="stack" id=
"stack"></a><span class="f_H2">Stack</span>
</p>

<p class="p_Text"><span class="f_Text">In every MQL5 program, a
special memory area called stack is allocated for storing local
function variables that are created automatically. One stack is
allocated for all functions. The default stack size is 256 kb, the
stack size can be managed using the <a href="compilation.htm"
class="topiclink">#property stacksize</a> compiler
directive.</span>
</p>

<p class="p_Text"><span class="f_Text"><a href="static.htm" class=
"topiclink">Static</a> local variables are stored in the same place
where other static and <a href="global.htm" class=
"topiclink">global</a> variables are stored - in a special memory
area, which exists separately from the stack. <a href=
"object_live.htm" class="topiclink">Dynamically</a> created
variables also use a memory area separate from the stack.</span>
</p>

<p class="p_Text"><span class="f_Text">With each function call, a
place on the stack is allocated for internal non-static variables.
After exiting the function, the memory is available for use
again.</span>
</p>

<p class="p_Text"><span class="f_Text">If from the first function
the second one is called, then the second function occupies the
required size from the remaining stack memory for its variables.
Thus, when using included functions, stack memory will be
sequentially occupied for each function. This may lead to a
shortage of memory during one of the function calls, such a
situation is called stack overflow.</span>
</p>

<p class="p_Text"><span class="f_Text">Therefore, for large local
data you should better use dynamic memory - when entering a
function, allocate the memory, which is required for local needs,
in the system (<a href="newoperator.htm" class="topiclink">new</a>,
<a href="arrayresize.htm" class="topiclink">ArrayResize()</a>), and
when exiting the function, release the memory (<a href=
"deleteoperator.htm" class="topiclink">delete</a>, <a href=
"arrayfree.htm" class="topiclink">ArrayFree()</a>).</span>
</p>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="types.htm"
class="topiclink">Data Types</a>, <a href="incapsulation.htm"
class="topiclink">Encapsulation and Extensibility of
Types</a>,<a href="initialization.htm" class=
"topiclink">Initialization of Variables</a>, <a href=
"variable_scope.htm" class="topiclink">Visibility Scope and
Lifetime of Variables</a>, <a href="object_live.htm" class=
"topiclink">Creating and Deleting Objects</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
