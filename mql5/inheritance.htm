<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Inheritance</title>
<meta name="keywords" content="">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "inheritance.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=inheritance.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=inheritance.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="oop.htm">Object-Oriented Programming</a> /
Inheritance</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="incapsulation.htm"><img style="vertical-align:middle;"
src="previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="polymorphism.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Inheritance</span>
</p>

<p class="p_Text"><span class="f_Text">The characteristic feature
of OOP is the encouragement of code reuse through inheritance. A
new class is made from the existing, which is called the base
class. The derived class uses the members of the base class, but
can also modify and supplement them.</span>
</p>

<p class="p_Text"><span class="f_Text">Many types are variations of
the existing types. It is often tedious to develop a new code for
each of them. In addition, the new code implies new errors. The
derived class inherits the description of the base class, thus any
re-development and re-testing of code is unnecessary. The
inheritance relationships are hierarchical.</span>
</p>

<p class="p_Text"><span class="f_Text">Hierarchy is a method that
allows to copy the elements in all their diversity and complexity.
It introduces the objects classification. For example, the periodic
table of elements has gases. They possess to properties inherent to
all periodic elements.</span>
</p>

<p class="p_Text"><span class="f_Text">Inert gases constitute the
next important subclass. The hierarchy is that the inert gas, such
as argon is a gas, and gas, in its turn, is part of the system.
Such a hierarchy allows to interpret behaviour of inert gases
easily. We know that their atoms contain protons and electrons,
that is true for all other elements.</span>
</p>

<p class="p_Text"><span class="f_Text">We know that they are in a
gaseous state at room temperature, like all the gases. We know that
no gas from inert gas subclass enters usual chemical reaction with
other elements, and it is a property of all inert gases.</span>
</p>

<p class="p_Text"><span class="f_Text">Consider an example of the
inheritance of geometric shapes. To describe the whole variety of
simple shapes (circle, triangle, rectangle, square etc.), the best
way is to create a base class (<a href="oop.htm#atd" class=
"topiclink">ADT</a>), which is the ancestor of all the derived
classes.</span>
</p>

<p class="p_Text"><span class="f_Text">Let's create a base class
CShape, which contains just the most common members describing the
shape. These members describe properties that are characteristic of
any shape - the type of the shape and main anchor point
coordinates.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;The&nbsp;base&nbsp;class&nbsp;Shape</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CShape</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">protected</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Shape&nbsp;type</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_xpos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;X&nbsp;-&nbsp;coordinate&nbsp;of&nbsp;the&nbsp;base&nbsp;point</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_ypos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Y&nbsp;-&nbsp;coordinate&nbsp;of&nbsp;the&nbsp;base&nbsp;point</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CShape(){m_type=</span><span class="f_CodeExample"
style="color: #008080;">0</span><span class=
"f_CodeExample">;&nbsp;m_xpos=</span><span class="f_CodeExample"
style="color: #008080;">0</span><span class=
"f_CodeExample">;&nbsp;m_ypos=</span><span class="f_CodeExample"
style="color: #008080;">0</span><span class=
"f_CodeExample">;}&nbsp;</span><span class="f_CodeExample" style=
"color: #808080;">//&nbsp;constructor</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetXPos(</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;x){m_xpos=x;}&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;set&nbsp;X</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetYPos(</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;y){m_ypos=y;}&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;set&nbsp;Y</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Next, create new classes
derived from the base class, in which we will add necessary fields,
each specifying a certain class. For the Circle shape it is
necessary to add a member that contains the radius value. The
Square shape is characterized by the side value. Therefore, derived
classes, inherited from the base class CShape will be declared as
follows:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;The&nbsp;derived&nbsp;class&nbsp;circle</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CCircle&nbsp;:&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">public</span><span class=
"f_CodeExample">&nbsp;CShape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;After&nbsp;a&nbsp;colon&nbsp;we&nbsp;define&nbsp;the&nbsp;base&nbsp;class</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;from&nbsp;which&nbsp;inheritance&nbsp;is&nbsp;made</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_radius;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;circle&nbsp;radius</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCircle(){m_type=</span><span class="f_CodeExample"
style="color: #008080;">1</span><span class=
"f_CodeExample">;}</span><span class="f_CodeExample" style=
"color: #808080;">//&nbsp;constructor,&nbsp;type&nbsp;1&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">For the Square shape class
declaration is similar:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;the&nbsp;derived&nbsp;class&nbsp;Square</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CSquare&nbsp;:&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">public</span><span class=
"f_CodeExample">&nbsp;CShape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;After&nbsp;a&nbsp;colon&nbsp;we&nbsp;define&nbsp;the&nbsp;base&nbsp;class</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;from&nbsp;which&nbsp;inheritance&nbsp;is&nbsp;made</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_square_side;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;square&nbsp;side</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSquare(){m_type=</span><span class="f_CodeExample"
style="color: #008080;">2</span><span class=
"f_CodeExample">;}&nbsp;</span><span class="f_CodeExample" style=
"color: #808080;">//&nbsp;constructor,&nbsp;type&nbsp;2&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">It should be noted that
while object is created the base class constructor is called first,
and then the <a href="classes.htm#constructor" class=
"topiclink">constructor</a> of the derived class is called. When an
object is destroyed first the <a href="classes.htm#destructor"
class="topiclink">destructor</a> of the derived class is called,
and then a base class destructor is called.</span>
</p>

<p class="p_Text"><span class="f_Text">Thus, by declaring the most
general members in the base class, we can add an additional members
in derived classes, which specify a particular class. Inheritance
allows creating powerful code libraries that can be reused many
times.</span>
</p>

<p class="p_Text"><span class="f_Text">The syntax for creating a
derived class from an already existing one is as follows:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;class_name&nbsp;:&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span><span class="f_CodeExample"
style="color: #0000ff;">public</span><span class=
"f_CodeExample">&nbsp;|&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">protected</span><span class=
"f_CodeExample">&nbsp;|&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">private</span><span class=
"f_CodeExample">)&nbsp;</span><span class="f_CodeExample" style=
"font-style: italic; vertical-align: sub;">opt</span><span class=
"f_CodeExample">&nbsp;&nbsp;base_class_name</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;members&nbsp;declaration</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><a class="help" name="public_inheritance" id=
"public_inheritance"></a><span class="f_Text">One of aspects of the
derived class is the visibility (openness) of its members
successors (heirs). The &nbsp;public, protected and private
keywords are used to indicate the extent, to which members of the
base class will be available for the derived one. The public
keyword after a colon in the header of a derived class indicates
that the protected and public members of the base class CShape
should be inherited as protected and public members of the derived
class CCircle.</span>
</p>

<p class="p_Text"><span class="f_Text">The private class members of
the base class are not available for the derived class. The public
inheritance also means that derived classes (CCircle and CSquare)
are CShapes. That is, the Square (CSquare) is a shape (CShape), but
the shape does not necessarily have to be a square.</span>
</p>

<p class="p_Text"><span class="f_Text">The derived class is a
modification of the base class, it inherits the protected and
public members of the base class. The constructors and destructors
of the base class cannot be inherited. In addition to members of
the base class, new members are added in a derivative class.</span>
</p>

<p class="p_Text"><span class="f_Text">The derived class may
include the implementation of member functions, different from the
base class. It has nothing common with an <a href="overload.htm"
class="topiclink">overload</a>, when the meaning of the same
function name may be different for different signatures.</span>
</p>

<p class="p_Text"><a class="help" name="protected_inheritance" id=
"protected_inheritance"></a><span class="f_Text">In protected
inheritance, public and protected members of base class become
protected members of derived class. In private inheritance, the
public and protected members of base class become private members
of the derived class.</span>
</p>

<p class="p_Text"><span class="f_Text">In protected and private
inheritance, the relation that "the object of a derivative class is
object of a base class" is not true. The protected and private
inheritance types are rare, and each of them needs to be used
carefully.</span>
</p>

<p class="p_Text"><span class="f_Text">It should be understood that
the type of inheritance (public, protected or private) does not
affect the ways of</span> <span class="f_Text" style=
"font-weight: bold;">accessing the members of base classes in the
hierarchy of inheritance from a derived class</span><span class=
"f_Text">. With any type of inheritance, only base class members
declared with public and protected access specifiers will be
available out of the derived classes. Let's consider it in the
following example:</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">copyright</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #008080;">"Copyright&nbsp;2011,&nbsp;MetaQuotes&nbsp;Software&nbsp;Corp."</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">link</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #008080;">"https://www.mql5.com"</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">version</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #008080;">"1.00"</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Example&nbsp;class&nbsp;with&nbsp;a&nbsp;few&nbsp;access&nbsp;types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CBaseClass</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;The&nbsp;private&nbsp;member&nbsp;is&nbsp;not&nbsp;available&nbsp;from&nbsp;derived&nbsp;classes</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_member;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">protected</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;The&nbsp;protected&nbsp;method&nbsp;is&nbsp;available&nbsp;from&nbsp;the&nbsp;base&nbsp;class&nbsp;and&nbsp;its&nbsp;derived&nbsp;classes</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Member(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(m_member);}</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Class&nbsp;constructor&nbsp;is&nbsp;available&nbsp;to&nbsp;all&nbsp;members&nbsp;of&nbsp;classes</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CBaseClass(){m_member=5;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">;};</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;A&nbsp;private&nbsp;method&nbsp;for&nbsp;assigning&nbsp;a&nbsp;value&nbsp;to&nbsp;m_member</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Member(</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;value)&nbsp;{&nbsp;m_member=value;};</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Derived&nbsp;class&nbsp;with&nbsp;errors&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CDerived:&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">public</span><span class=
"f_CodeExample">&nbsp;CBaseClass&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;specification&nbsp;of&nbsp;public&nbsp;inheritance&nbsp;can&nbsp;be&nbsp;omitted,&nbsp;since&nbsp;it&nbsp;is&nbsp;default</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;Func()&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;In&nbsp;the&nbsp;derived&nbsp;class,&nbsp;define&nbsp;a&nbsp;function&nbsp;with&nbsp;calls&nbsp;to&nbsp;base&nbsp;class&nbsp;members</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;An&nbsp;attempt&nbsp;to&nbsp;modify&nbsp;a&nbsp;private&nbsp;member&nbsp;of&nbsp;the&nbsp;base&nbsp;class</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_member=0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Error,&nbsp;the&nbsp;private&nbsp;member&nbsp;of&nbsp;the&nbsp;base&nbsp;class&nbsp;is&nbsp;not&nbsp;available</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Member(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Error,&nbsp;the&nbsp;private&nbsp;method&nbsp;of&nbsp;the&nbsp;base&nbsp;class&nbsp;is&nbsp;not&nbsp;available&nbsp;in&nbsp;derived&nbsp;classes</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Reading&nbsp;the&nbsp;member&nbsp;of&nbsp;the&nbsp;base&nbsp;class</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(m_member);&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Error,&nbsp;the&nbsp;private&nbsp;member&nbsp;of&nbsp;the&nbsp;base&nbsp;class&nbsp;is&nbsp;not&nbsp;available</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(Member());&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;No&nbsp;error,&nbsp;protected&nbsp;method&nbsp;is&nbsp;available&nbsp;from&nbsp;the&nbsp;base&nbsp;class&nbsp;and&nbsp;its&nbsp;derived&nbsp;classes</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">In the above example,
CBaseClass has only a public method  the constructor. Constructors
are called automatically when creating a class object. Therefore,
the private member m_member and the protected methods Member()
cannot be called from the outside. But in case of public
inheritance, the Member() method of the base class will be
available from the derived classes.</span>
</p>

<p class="p_Text"><span class="f_Text">In case of</span>
<span class="f_Text">protected inheritance, all the members of the
base class with public and protected access become protected. It
means that if public data members and methods of the base class
were accessible from the outside, with protected inheritance they
are available only from the classes of the derived class and its
further derivatives</span><span class="f_Text">.</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Example&nbsp;class&nbsp;with&nbsp;a&nbsp;few&nbsp;access&nbsp;types&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CBaseMathClass</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;The&nbsp;private&nbsp;member&nbsp;is&nbsp;not&nbsp;available&nbsp;from&nbsp;derived&nbsp;classes</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_Pi;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Getting&nbsp;and&nbsp;setting&nbsp;a&nbsp;value&nbsp;for&nbsp;m_Pi</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetPI(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;v){m_Pi=v;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">;};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetPI(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;m_Pi;};</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;The&nbsp;class&nbsp;constructor&nbsp;is&nbsp;available&nbsp;to&nbsp;all&nbsp;members</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CBaseMathClass()&nbsp;{SetPI(3.14);&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"%s"</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #0000ff;">__FUNCTION__</span><span class=
"f_CodeExample">);};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Derived&nbsp;class,&nbsp;in&nbsp;which&nbsp;m_Pi&nbsp;cannot&nbsp;be&nbsp;modified&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CProtectedChildClass:&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">protected</span><span class=
"f_CodeExample">&nbsp;CBaseMathClass&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Protected&nbsp;inheritance</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_radius;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Public&nbsp;methods&nbsp;in&nbsp;the&nbsp;derived&nbsp;class</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetRadius(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;r){m_radius=r;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">;};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetCircleLength(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;GetPI()*m_radius;};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Script&nbsp;starting&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;When&nbsp;creating&nbsp;a&nbsp;derived&nbsp;class,&nbsp;the&nbsp;constructor&nbsp;of&nbsp;the&nbsp;base&nbsp;class&nbsp;will&nbsp;be&nbsp;called&nbsp;automatically</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CProtectedChildClass&nbsp;pt;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Specify&nbsp;radius</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;pt.SetRadius(10);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Length=%G"</span><span class=
"f_CodeExample">,pt.GetCircleLength());</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;If&nbsp;we&nbsp;uncomment&nbsp;the&nbsp;line&nbsp;below,&nbsp;we&nbsp;will&nbsp;get&nbsp;an&nbsp;error&nbsp;at&nbsp;the&nbsp;stage&nbsp;of&nbsp;compilation,&nbsp;since&nbsp;SetPI()&nbsp;is&nbsp;now&nbsp;protected</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;pt.SetPI(3);&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Now&nbsp;declare&nbsp;a&nbsp;variable&nbsp;of&nbsp;the&nbsp;base&nbsp;class&nbsp;and&nbsp;try&nbsp;to&nbsp;set&nbsp;the&nbsp;Pi&nbsp;constant&nbsp;equal&nbsp;to&nbsp;10</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CBaseMathClass&nbsp;bc;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;bc.SetPI(10);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Here&nbsp;is&nbsp;the&nbsp;result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"bc.GetPI()=%G"</span><span class=
"f_CodeExample">,bc.GetPI());</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The example shows that
methods SetPI() and GetPi() in the base class CBaseMathClass are
open and available for calling from any place of the program. But
at the same time, for CProtectedChildClass which is derived from it
these methods can be called only from the methods of the
CProtectedChildClass class or its derived classes.</span>
</p>

<p class="p_Text"><span class="f_Text">In case of</span>
<span class="f_Text">private inheritance, all the members of the
basic class with the public</span> <span class="f_Text">and</span>
<span class="f_Text">protected access become private, and calling
them becomes impossible in further inheritance</span><span class=
"f_Text">.</span></p>

<p class="p_Text"><span class="f_Text">MQL5 has no multiple
inheritance.</span>
</p>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="classes.htm"
class="topiclink">Structures and Classes</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
