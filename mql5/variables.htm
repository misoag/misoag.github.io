<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Variables</title>
<meta name="keywords" content="">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "variables.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=variables.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=variables.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> /
Variables</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="events.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="local.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Variables</span>
</p>

<p class="p_H3"><span class="f_H3">Declaring Variables</span>
</p>

<p class="p_Text"><span class="f_Text">Variables must be declared
before they are used. Unique names are used to identify variables.
To declare a variable, you must specify its type and a unique name.
Declaration of variable is not an operator.</span>
</p>

<p class="p_Text"><span class="f_Text">Simple types are:</span>
</p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li">char, short, int, long, uchar, ushort, uint,
ulong  integers;</span>
</li>

<li><span class="f_li">color  integer representing the
RGB-color;</span>
</li>

<li><span class="f_li">datetime  the date and time, an unsigned
integer containing the number of seconds since 0 hour January 1,
1970;</span>
</li>

<li><span class="f_li">bool  boolean values</span> <span class=
"f_li" style="font-style: italic;">true</span> <span class=
"f_li">and</span> <span class="f_li" style=
"font-style: italic;">false</span><span class="f_li">;</span></li>

<li><span class="f_li">double  double-precision floating point
number;</span>
</li>

<li><span class="f_li">float  single-precision floating point
number;</span>
</li>

<li><span class="f_li">string  character strings.</span>
</li>
</ul>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Examples:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;szInfoBox;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;nOrders;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;dSymbolPrice;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">bool</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;bLog;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">datetime</span><span class=
"f_CodeExample">&nbsp;tBegin_Data&nbsp;&nbsp;&nbsp;=&nbsp;D'2004.01.01&nbsp;00:00';</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">color</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;cModify_Color&nbsp;=&nbsp;C'0x44,0xB9,0xE6';</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Complex or compound types:</span>
</p>

<p class="p_Text"><span class="f_Text">Structures are composite
data types, constructed using other types.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;MyTime</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;hour;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;0-23</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;minute;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #808080;">//&nbsp;0-59</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;second;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #808080;">//&nbsp;0-59</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style="color: #808080;">...</span><br>
<span class=
"f_CodeExample">MyTime&nbsp;strTime;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Variable&nbsp;of&nbsp;the&nbsp;previously&nbsp;declared&nbsp;structure&nbsp;MyTime</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">You can't declare variables
of the structure type until you declare the structure.</span>
</p>

<p class="p_Text"><a class="help" name="array_define" id=
"array_define"></a><span class="f_Text" style=
"font-weight: bold;">Arrays</span>
</p>

<p class="p_Text"><span class="f_Text">Array &nbsp;is the indexed
sequence of identical-type data:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;a[50];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;One-dimensional&nbsp;array&nbsp;of&nbsp;50&nbsp;integers.</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;m[7][50];&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Two-dimensional&nbsp;array&nbsp;of&nbsp;seven&nbsp;arrays,</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;each&nbsp;of&nbsp;them&nbsp;consisting&nbsp;of&nbsp;50&nbsp;numbers.</span><br>
<span class=
"f_CodeExample">MyTime&nbsp;t[100];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Array&nbsp;containing&nbsp;elements&nbsp;such&nbsp;as&nbsp;MyTime</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Only an integer can be an
array index. No more than four-dimensional arrays are allowed.
Numbering of array elements starts with 0. The last element of a
one-dimensional array has the number which is 1 less than the array
size. This means that call for the last element of an array
consisting of 50 integers will appear as a[49]. The same concerns
multidimensional arrays: A dimension is indexed from 0 to the
dimension size-1. The last element of a two-dimensional array from
the example will appear as m[6][49].</span>
</p>

<p class="p_Text"><span class="f_Text">Static arrays can't be
represented as timeseries, i.e., the <a href="arraysetasseries.htm"
class="topiclink">ArraySetAsSeries()</a> function, which sets
access to array elements from the end to beginning, can't be
applied to them. If you want to provide access to an array the same
as in <a href="series.htm" class="topiclink">timeseries</a>, use
the <a href="dynamic_array.htm" class="topiclink">dynamic array
object</a>.</span>
</p>

<p class="p_Text"><span class="f_Text">If there is an attempt to
access out of the array range, the executing subsystem will
generate a critical error and the program will be stopped.</span>
</p>

<p class="p_H3"><span class="f_H3">Access Specifiers</span>
</p>

<p class="p_Text"><span class="f_Text">Access specifiers define how
the compiler can access variables, members of structures or
classes.</span>
</p>

<p class="p_Text"><a class="help" name="const" id=
"const"></a><span class="f_Text">The</span> <span class="f_Text"
style="color: #0000ff;">const</span> <span class="f_Text">specifier
declares a variable as a constant, and does not allow to change
this variable during runtime. A single initialization of a variable
is allowed when declaring it.</span></p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnCalculate</span><span class=
"f_CodeExample">&nbsp;(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rates_total,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;size&nbsp;of&nbsp;the&nbsp;price[]&nbsp;array</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;prev_calculated,&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;bars&nbsp;handled&nbsp;on&nbsp;a&nbsp;previous&nbsp;call</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;begin,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;where&nbsp;the&nbsp;significant&nbsp;data&nbsp;start&nbsp;from</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;price[]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;array&nbsp;to&nbsp;calculate</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">To access members of
structures and classes use the following qualifiers:</span>
</p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><a class="help" name="public" id="public"></a><span class=
"f_li"><a href="classes.htm#public" class="topiclink">public</a> 
allows unrestricted access to the variable or class method</span>
</li>

<li><a class="help" name="protected" id=
"protected"></a><span class="f_li"><a href="inheritance.htm" class=
"topiclink">protected</a>  allows access from methods of this
class, as well as from methods of <a href=
"inheritance.htm#public_inheritance" class="topiclink">publicly
inherited</a> classes. Other access is impossible;</span>
</li>

<li><a class="help" name="private" id="private"></a><span class=
"f_li">private  allows access to variables and class methods only
from methods of the same class.</span>
</li>

<li><a class="help" name="virtual" id="virtual"></a><span class=
"f_li"><a href="virtual.htm" class="topiclink">virtual</a> 
applies only to class methods (but not to methods of structures)
and tells the compiler that this method should be placed in the
table of virtual functions of the class.</span>
</li>
</ul>

<p class="p_H3"><span class="f_H3">Storage Classes</span>
</p>

<p class="p_Text"><span class="f_Text">There are three storage
classes: <a href="static.htm" class="topiclink">static</a>,
<a href="inputvariables.htm" class="topiclink">input</a> and
<a href="externvariables.htm" class="topiclink">extern</a>. These
modifiers of a storage class explicitly indicate to the compiler
that corresponding variables are distributed in a pre-allocated
area of memory, which is called the global pool. Besides, these
modifiers indicate the special processing of variable data. If a
variable declared on a local level is not a <a href="static.htm"
class="topiclink">static</a> one, memory for such a variable is
allocated automatically at a program stack. Freeing of memory
allocated for a non-static array is also performed automatically
when going beyond the visibility area of the block, in which the
array is declared.</span>
</p>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="types.htm"
class="topiclink">Data Types</a>, <a href="incapsulation.htm"
class="topiclink">Encapsulation and Extensibility of
Types</a>,<a href="initialization.htm" class=
"topiclink">Initialization of Variables</a>, <a href=
"variable_scope.htm" class="topiclink">Visibility Scope and
Lifetime of Variables</a>, <a href="object_live.htm" class=
"topiclink">Creating and Deleting Objects</a>, <a href=
"staticmembers.htm#const" class="topiclink">Static Members of a
Class</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
