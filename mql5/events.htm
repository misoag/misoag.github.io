<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Event Handling Functions</title>
<meta name="keywords" content="">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "events.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=events.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=events.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="function.htm">Functions</a> / Event Handling
Functions</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="export.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="variables.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Event Handling Functions</span>
</p>

<p class="p_Text"><span class="f_Text">The MQL5 language provides
processing of some <a href="event_fire.htm" class=
"topiclink">predefined events</a>. Functions for handling these
events must be defined in a MQL5 program; function name, return
type, composition of parameters (if there are any) and their types
must strictly conform to the description of the event handler
function.</span>
</p>

<p class="p_Text"><span class="f_Text">The event handler of the
client terminal identifies functions, handling this or that event,
by the type of return value and type of parameters. If other
parameters, not corresponding to below descriptions, are specified
for a corresponding function, or another return type is indicated
for it, such a function will not be used as an event
handler.</span>
</p>

<p class="p_H3"><a class="help" name="onstart" id=
"onstart"></a><span class="f_H3">OnStart</span>
</p>

<p class="p_Text"><span class="f_Text">The OnStart() function is
the <a href="event_fire.htm#start" class="topiclink">Start</a>
event handler, which is automatically generated</span> <span class=
"f_Text" style="font-weight: bold;">only</span> <span class=
"f_Text">for running</span> <span class="f_Text" style=
"font-weight: bold;">scripts</span><span class="f_Text">. It must
be of</span> <span class="f_Text" style=
"color: #0000ff;">void</span> <span class="f_Text">type, with no
parameters:</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">For the OnStart() function,
the int return type can be specified.</span>
</p>

<p class="p_H3"><a class="help" name="oninit" id=
"oninit"></a><span class="f_H3">OnInit</span>
</p>

<p class="p_Text"><span class="f_Text">The OnInit() function is the
<a href="event_fire.htm#init" class="topiclink">Init</a> event
handler. It must be of</span> <span class="f_Text" style=
"color: #0000ff;">void</span> <span class="f_Text">or</span>
<span class="f_Text" style="color: #0000ff;">int</span>
<span class="f_Text">type, with no parameters:</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnInit</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The Init event is generated
immediately after an Expert Advisor or an indicator is downloaded;
this event is not generated for scripts. The OnInit() function is
used for initialization. If OnInit() has the int type of the return
value, the non-zero return code means unsuccessful initialization,
and it generates the <a href="event_fire.htm#deinit" class=
"topiclink">Deinit</a> event with the code of deinitialization
reason</span> <span class="f_fortable"><a href=
"uninit.htm#reason_initfailed" class=
"topiclink">REASON_INITFAILED</a></span><span class=
"f_Text">.</span></p>

<p class="p_Text"><span class="f_Text">To optimize input parameters
of an Expert Advisor, it is recommended to use values of the
<a href="events.htm#enum_init_retcode" class=
"topiclink">ENUM_INIT_RETCODE</a> enumeration as the return code.
These values are used for organizing the course of optimization,
including the selection of the most appropriate <a href=
"testing.htm#agents" class="topiclink">testing agents</a>. During
initialization of an Expert Advisor before the start of testing you
can request information about the configuration and resources of an
agent (the number of cores, amount of free memory, etc.) using the
<a href="terminalinfointeger.htm" class=
"topiclink">TerminalInfoInteger()</a> function. Based on the
information obtained, you can either allow to use this testing
agent, or reject using it during the optimization of this Expert
Advisor.</span>
</p>

<p class="p_Text"><a class="help" name="enum_init_retcode" id=
"enum_init_retcode"></a><span class="f_Text" style=
"font-weight: bold;">ENUM_INIT_RETCODE</span>
</p>

<div style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 8px 17px 7px 17px;">
<table class="EnumTable" cellspacing="0" cellpadding="5" border="1"
style=
"border:solid 2px #b1c2d6; border-spacing:0px; border-collapse:collapse;">
<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; width:200px; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumHeader"><span class=
"f_EnumHeader">Identifier</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumHeader"><span class=
"f_EnumHeader">Description</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; width:200px; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumID"><span class="f_EnumID">INIT_SUCCEEDED</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc">Successful
initialization, testing of the Expert Advisor can be
continued.</span>
</p>

<p class="p_EnumDesc"><span class="f_EnumDesc">This code means the
same as a null value Â– the Expert Advisor has been successfully
initialized in the tester.</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; width:200px; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumID"><span class="f_EnumID">INIT_FAILED</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc">Initialization
failed; there is no point in continuing testing because of fatal
errors. For example, failed to create an indicator that is required
for the work of the Expert Advisor.</span>
</p>

<p class="p_EnumDesc"><span class="f_EnumDesc">This return value
means the same as a value other than zero - initialization of the
Expert Advisor in the tester failed.</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; width:200px; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumID"><span class=
"f_EnumID">INIT_PARAMETERS_INCORRECT</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc">This value means the
incorrect set of input parameters. The result string containing
this return code is highlighted in red in the general optimization
table.</span>
</p>

<p class="p_EnumDesc"><span class="f_EnumDesc">Testing for the
given set of parameters of the Expert Advisor will not be executed,
the agent is free to receive a new task.</span>
</p>

<p class="p_EnumDesc"><span class="f_EnumDesc">Upon receiving this
value, the strategy tester will reliably not pass this task to
other agents for retry.</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; width:200px; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumID"><span class=
"f_EnumID">INIT_AGENT_NOT_SUITABLE</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc">No errors during
initialization, but for some reason the agent is not suitable for
testing. For example, not enough memory, no <a href="opencl.htm"
class="topiclink">OpenCL support</a>, etc.</span>
</p>

<p class="p_EnumDesc"><span class="f_EnumDesc">After the return of
this code, the agent will not receive tasks until the end of
<a href="testing.htm" class="topiclink">this
optimization</a>.</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The OnInit() function of the
void type always denotes successful initialization.</span>
</p>

<p class="p_H3"><a class="help" name="ondeinit" id=
"ondeinit"></a><span class="f_H3">OnDeinit</span>
</p>

<p class="p_Text"><span class="f_Text">The OnDeinit() function is
called during deinitialization and is the <a href=
"event_fire.htm#deinit" class="topiclink">Deinit</a> event handler.
It must be declared as the</span> <span class="f_Text" style=
"color: #0000ff;">void</span> <span class="f_Text">type</span>
<span class="f_li">and should have one parameter of the</span>
<span class="f_li" style="color: #0000ff;">const int</span>
<span class="f_li">type, which contains <a href="uninit.htm" class=
"topiclink">the code of deinitialization reason</a>. If</span>
<span class="f_Text">a different type is</span> <span class=
"f_Text">declared, the compiler will generate a warning, but the
function will not be called. For scripts the Deinit event is not
generated and therefore the OnDeinit() function can't be used in
scripts.</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnDeinit</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;reason);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The Deinit event is
generated for Expert Advisors and indicators in the following
cases:</span>
</p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 0px 17px;">
<li><span class="f_li">before reinitialization due to the change of
a symbol or chart period, to which the mql5 program is
attached;</span>
</li>
</ul>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 0px 0px 0px 17px;">
<li><span class="f_li">before reinitialization due to the change of
<a href="inputvariables.htm" class="topiclink">input
parameters</a>;</span>
</li>
</ul>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 0px 17px 3px 17px;">
<li><span class="f_li">before unloading the mql5 program.</span>
</li>
</ul>

<p class="p_H3"><a class="help" name="ontick" id=
"ontick"></a><span class="f_H3">OnTick</span>
</p>

<p class="p_Text"><span class="f_Text">The <a href=
"event_fire.htm#newtick" class="topiclink">NewTick</a> event is
generated for</span> <span class="f_Text" style=
"font-weight: bold;">Expert Advisors only</span> <span class=
"f_Text">when a new tick for a symbol is received, to the chart of
which the Expert Advisor is attached. It's useless to define the
OnTick() function in a custom indicator or script, because the
NewTick event is not generated for them.</span></p>

<p class="p_Text"><span class="f_Text">The Tick event is generated
only for Expert Advisors, but this does not mean that Expert
Advisors required the OnTick() function, since not only NewTick
events are generated for Expert Advisors, but also events of Timer,
BookEvent and ChartEvent are generated. It must be declared as
the</span> <span class="f_Text" style="color: #0000ff;">void</span>
<span class="f_Text">type, with no parameters:</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTick</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_H3"><a class="help" name="ontimer" id=
"ontimer"></a><span class="f_H3">OnTimer</span>
</p>

<p class="p_Text"><span class="f_Text">The OnTimer() function is
called when the <a href="event_fire.htm#timer" class=
"topiclink">Timer</a> event occurs, which is generated by the
system timer only for Expert Advisors and indicators - it can't be
used in scripts. The frequency of the event occurrence is set when
subscribing to notifications about this event to be received by the
<a href="eventsettimer.htm" class="topiclink">EventSetTimer()</a>
function.</span>
</p>

<p class="p_Text"><span class="f_Text">You can unsubscribe from
receiving timer events for a particular Expert Advisor using the
<a href="eventkilltimer.htm" class="topiclink">EventKillTimer()</a>
function. The function must be defined with the void type, with no
parameters:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTimer</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">It is recommended to call
the EventSetTimer() function once in the OnInit() function, and the
EventKillTimer() function should be called once in
OnDeinit().</span>
</p>

<p class="p_Text"><span class="f_Text">Every Expert Advisor, as
well as every indicator works with its own timer and receives
events only from it. As soon as the mql5 program stops operating,
the timer is destroyed forcibly, if it was created but hasn't been
disabled by the <a href="eventkilltimer.htm" class=
"topiclink">EventKillTimer()</a> function.</span>
</p>

<p class="p_H3"><a class="help" name="ontrade" id=
"ontrade"></a><span class="f_H3">OnTrade</span>
</p>

<p class="p_Text"><span class="f_Text">The function is called
&nbsp;when the <a href="event_fire.htm#trade" class=
"topiclink">Trade</a> event occurs, which appears when you change
the list of <a href="orderstotal.htm" class="topiclink">placed
orders</a> and <a href="positionstotal.htm" class="topiclink">open
positions</a>, <a href="historyorderstotal.htm" class=
"topiclink">the history of orders</a> and <a href=
"historydealstotal.htm" class="topiclink">history of deals</a>.
When a trade activity is performed (pending order opening, position
opening/closing, stops setting, pending order triggering, etc.) the
history of orders and deals and/or list of positions and current
orders is changed accordingly.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTrade</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Users must independently
implement in the code the verification of a trade account state
when such an event is received (if this is required by the trade
strategy conditions). If the OrderSend() function call has been
completed successfully and returned a value of true, this means
that the trading server has put the order into the queue for
execution and assigned a ticket number to it. As soon as the server
processes this order, the Trade event will be generated. And if a
user remembers the ticket value, he/she will be able to find out
what happened to the order using this value during OnTrade() event
handling.</span>
</p>

<p class="p_H3"><a class="help" name="ontradetransaction" id=
"ontradetransaction"></a><span class=
"f_H3">OnTradeTransaction</span>
</p>

<p class="p_Text"><span class="f_Text">When performing some
definite actions on a trade account, its state changes. Such
actions include:</span>
</p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li">Sending a trade request from any MQL5
application in the client terminal using <a href="ordersend.htm"
class="topiclink">OrderSend</a> and <a href="ordersendasync.htm"
class="topiclink">OrderSendAsync</a> functions and its further
execution;</span>
</li>

<li><span class="f_li">Sending a trade request via the terminal
graphical interface and its further execution;</span>
</li>

<li><span class="f_li">Pending orders and stop orders activation on
the server;</span>
</li>

<li><span class="f_li">Performing operations on a trade server
side.</span>
</li>
</ul>

<p class="p_Text"><span class="f_Text">The following trade
transactions are performed as a result of these actions:</span>
</p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li">handling a trade request;</span>
</li>

<li><span class="f_li">changing open orders;</span>
</li>

<li><span class="f_li">changing orders history;</span>
</li>

<li><span class="f_li">changing deals history;</span>
</li>

<li><span class="f_li">changing positions.</span>
</li>
</ul>

<p class="p_Text"><span class="f_Text">For example, when sending a
market buy order, it is handled, an appropriate buy order is
created for the account, the order is then executed and removed
from the list of the open ones, then it is added to the orders
history, an appropriate deal is added to the history and a new
position is created. All these actions are trade transactions.
Arrival of such a transaction at the terminal is a <a href=
"event_fire.htm#tradetransaction" class=
"topiclink">TradeTransaction</a> event. It calls OnTradeTransaction
handler</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"font-weight: bold; color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTradeTransaction</span><span class=
"f_CodeExample">(</span><br>
<span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">MqlTradeTransaction</span><span class=
"f_CodeExample">&amp;&nbsp;</span><span class="f_CodeExample"
style="color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample">trans,&nbsp;</span><span class="f_CodeExample"
style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;trade&nbsp;transaction&nbsp;structure</span><br>
<span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">MqlTradeRequest</span><span class=
"f_CodeExample">&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">request,&nbsp;</span><span class="f_CodeExample"
style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;request&nbsp;structure</span><br>
<span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">MqlTradeResult</span><span class=
"f_CodeExample">&amp;</span><span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">result</span><span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;result&nbsp;structure</span><br>
<span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample">);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The handler contains three
parameters:</span>
</p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li" style="font-weight: bold;">trans</span>
<span class="f_li">- this parameter gets <a href=
"mqltradetransaction.htm" class="topiclink">MqlTradeTransaction</a>
structure describing a trade transaction applied to a trade
account;</span></li>

<li><span class="f_li" style="font-weight: bold;">request</span>
<span class="f_li">- this parameter gets <a href=
"mqltraderequest.htm" class="topiclink">MqlTradeRequest</a>
structure describing a trade request;</span></li>

<li><span class="f_li" style="font-weight: bold;">result</span>
<span class="f_li">- this parameter gets <a href=
"mqltraderesult.htm" class="topiclink">MqlTradeResult</a> structure
describing a trade request execution result.</span></li>
</ul>

<p class="p_Text"><span class="f_Text">The last two</span>
<span class="f_Text" style="font-weight: bold;">request</span>
<span class="f_Text">and</span> <span class="f_Text" style=
"font-weight: bold;">result</span> <span class="f_Text">parameters
are filled by values only for <a href=
"enum_trade_transaction_type.htm" class=
"topiclink">TRADE_TRANSACTION_REQUEST</a> type transaction, data on
transaction can be received from</span> <span class="f_Text" style=
"font-style: italic;">type</span> <span class="f_Text">parameter
of</span> <span class="f_Text" style=
"font-weight: bold;">trans</span> <span class="f_Text">variable.
Note that in this case,</span> <span class="f_Text" style=
"font-style: italic;">request_id</span> <span class="f_Text">field
in</span> <span class="f_Text" style=
"font-weight: bold;">result</span> <span class="f_Text">variable
contains ID of</span> <span class="f_Text" style=
"font-weight: bold;">request</span> <span class="f_Text"><a href=
"mqltraderequest.htm" class="topiclink">trade request</a>, after
the execution of which the <a href="mqltradetransaction.htm" class=
"topiclink">trade transaction</a> described in</span> <span class=
"f_Text" style="font-weight: bold;">trans</span> <span class=
"f_Text">variable has been performed. Request ID allows to
associate the performed action (OrderSend or OrderSendAsync
functions call) with the result of this action sent to <a href=
"events.htm#ontradetransaction" class=
"topiclink">OnTradeTransaction()</a>.</span></p>

<p class="p_Text"><span class="f_Text">One trade request manually
sent from the terminal or via <a href="ordersend.htm" class=
"topiclink">OrderSend()</a>/<a href="ordersendasync.htm" class=
"topiclink">OrderSendAsync()</a> functions can generate several
consecutive transactions on the trade server. Priority of these
transactions' arrival at the terminal is not guaranteed. Thus, you
should not expect that one group of transactions will arrive after
another one when developing your trading algorithm. Besides,
transactions can be lost during delivery from the server to the
terminal.</span>
</p>

<div style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 8px 17px 7px 17px;">
<table class="attentable" cellspacing="0" cellpadding="8" border=
"1" style=
"background-color:#fbfbec; border:solid 1px #e2e2e2; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:8px; border:none">
<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 4px; margin: 0px 4px 0px 4px;">
<li><span class="f_fortable">All types of trade transactions are
described in <a href="enum_trade_transaction_type.htm" class=
"topiclink">ENUM_TRADE_TRANSACTION_TYPE</a> enumeration.</span>
</li>

<li><span class="f_fortable">MqlTradeTransaction structure
describing a trade transaction is filled in different ways
depending on a transaction type. For example, only type field
(trade transaction type) must be analyzed for
TRADE_TRANSACTION_REQUEST type transactions. The second and third
parameters of OnTradeTransaction function (request and result) must
be analyzed for additional data. For more information, see <a href=
"mqltradetransaction.htm" class="topiclink">"Structure of a Trade
Transaction"</a>.</span>
</li>

<li><span class="f_fortable">A trade transaction description does
not deliver all available information concerning orders, deals and
positions (e.g., comments). <a href="ordergetdouble.htm" class=
"topiclink">OrderGet*</a>, <a href="historyordergetdouble.htm"
class="topiclink">HistoryOrderGet*</a>, <a href=
"historydealgetdouble.htm" class="topiclink">HistoryDealGet*</a>
and <a href="positiongetdouble.htm" class=
"topiclink">PositionGet*</a> functions should be used to get
extended information.</span>
</li>
</ul>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">After applying trade
transactions for a client account, they are consistently placed to
the terminal trade transactions queue, from which they consistently
sent to OnTradeTransaction entry point in order of arrival at the
terminal.</span>
</p>

<p class="p_Text"><span class="f_Text">When handling trade
transactions by an Expert Advisor using OnTradeTransaction handler,
the terminal continues handling newly arrived trade transactions.
Therefore, the state of a trade account can change during
OnTradeTransaction operation already. For example, while an MQL5
program handles an event of adding a new order, it may be executed,
deleted from the list of the open ones and moved to the history.
Further on, the application will be notified of these
events.</span>
</p>

<p class="p_Text"><span class="f_Text">Transactions queue length
comprises 1024 elements. If OnTradeTransaction handles a new
transaction for too long, the old ones in the queue may be
superseded by the newer ones.</span>
</p>

<div style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 8px 17px 7px 17px;">
<table class="attentable" cellspacing="0" cellpadding="8" border=
"1" style=
"background-color:#fbfbec; border:solid 1px #e2e2e2; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:8px; border:none">
<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 4px; margin: 0px 4px 0px 4px;">
<li><span class="f_fortable">Generally, there is no accurate ratio
of the number of OnTrade and OnTradeTransaction calls. One OnTrade
call corresponds to one or several OnTradeTransaction calls.</span>
</li>

<li><span class="f_fortable">OnTrade is called after appropriate
OnTradeTransaction calls.</span>
</li>
</ul>
</td>
</tr>
</table>
</div>

<p class="p_H3"><a class="help" name="ontester" id=
"ontester"></a><span class="f_H3">OnTester</span>
</p>

<p class="p_Text"><span class="f_Text">The OnTester() function is
the handler of the <a href="event_fire.htm#tester" class=
"topiclink">Tester</a> event that is automatically generated after
a history testing of an Expert Advisor on the chosen interval is
over. The function must be defined with the double type, with no
parameters:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTester</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The function is called right
before the call of OnDeinit() and has the same type of the return
value - double. OnTester() can be used only in the testing of
Expert Advisors. Its main purpose is to calculate a certain value
that is used as the Custom max criterion in the genetic
optimization of input parameters.</span>
</p>

<p class="p_Text"><span class="f_Text">In the genetic optimization
descending sorting is applied to results within one generation.
I.e. from the point of view of the optimization criterion, the best
results are those with largest values (for the Custom max
optimization criterion values returned by the OnTester function are
taken into account). In such a sorting, the worst values are
positioned at the end and further thrown off and do not participate
in the forming of the next generation.</span>
</p>

<p class="p_H3"><a class="help" name="ontesterinit" id=
"ontesterinit"></a><span class="f_H3">OnTesterInit</span>
</p>

<p class="p_Text"><span class="f_Text">The OnTesterInit() function
is the handler of the <a href="event_fire.htm#tester" class=
"topiclink">TesterInit</a> event, which is automatically generated
before the start of Expert Advisor optimization in the strategy
tester. The function must be defined with the void type. It has no
parameters:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTesterInit</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">With the start of
optimization, an Expert Advisor with the OnTesterDeinit() or
OnTesterPass() handler is automatically loaded in a separate
terminal chart with the symbol and period specified in the tester,
and receives the TesterInit event. The function is used for Expert
Advisor initialization before the start of optimization for further
<a href="optimization_frames.htm" class="topiclink">processing of
optimization results</a>.</span>
</p>

<p class="p_H3"><a class="help" name="ontesterpass" id=
"ontesterpass"></a><span class="f_H3">OnTesterPass</span>
</p>

<p class="p_Text"><span class="f_Text">The OnTesterPass() function
is the handler of the <a href="event_fire.htm#tester" class=
"topiclink">TesterPass</a> event, which is automatically generated
when a frame is received during Expert Advisor optimization in the
strategy tester. The function must be defined with the void type.
It has no parameters:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTesterPass</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">An Expert Advisor with the
OnTesterPass() handler is automatically loaded in a separate
terminal chart with the symbol/period specified for testing, and
gets TesterPass events when a frame is received during
optimization. The function is used for dynamic handling of <a href=
"optimization_frames.htm" class="topiclink">optimization
results</a> "on the spot" without waiting for its completion.
Frames are added using the <a href="frameadd.htm" class=
"topiclink">FrameAdd()</a> function, which can be called after the
end of a single pass in the</span> <span class="f_Text" style=
"color: #0000ff;"><a href="events.htm#ontester" class=
"topiclink">OnTester()</a></span> <span class=
"f_Text">handler.</span></p>

<p class="p_H3"><a class="help" name="ontesterdeinit" id=
"ontesterdeinit"></a><span class="f_H3">OnTesterDeinit</span>
</p>

<p class="p_Text"><span class="f_Text">OnTesterDeinit() is the
handler of the <a href="event_fire.htm#tester" class=
"topiclink">TesterDeinit</a> event, which is automatically
generated after the end of Expert Advisor optimization in the
strategy tester. The function must be defined with the void type.
It has no parameters:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnTesterDeinit</span><span class=
"f_CodeExample">();</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">An Expert Advisor with the
TesterDeinit() handler is automatically loaded on a chart at the
start of optimization, and receives TesterDeinit after its
completion. The function is used for final processing of all
<a href="optimization_frames.htm" class="topiclink">optimization
results</a>.</span>
</p>

<p class="p_H3"><a class="help" name="onbookevent" id=
"onbookevent"></a><span class="f_H3">OnBookEvent</span>
</p>

<p class="p_Text"><span class="f_Text">The OnBookEvent() function
is the <a href="event_fire.htm#bookevent" class=
"topiclink">BookEvent</a> handler. BookEvent is generated for
Expert Advisors and indicators when Depth of Market changes. It
must be of the void type and have one parameter of the string
type:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnBookEvent</span><span class=
"f_CodeExample">&nbsp;(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&amp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">symbol</span><span class=
"f_CodeExample">);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">To receive BookEvent events
for any symbol, you just need to pre-subscribe to receive these
events for this symbol using the <a href="marketbookadd.htm" class=
"topiclink">MarketBookAdd()</a> function.</span> <span class=
"f_li">In order to unsubscribe from receiving the BookEvent events
for a particular symbol, call <a href="marketbookrelease.htm"
class="topiclink">MarketBookRelease()</a>.</span></p>

<p class="p_Text"><span class="f_li">Unlike other events, the
BookEvent event is broadcast. This means that if one Expert Advisor
subscribes to receiving BookEvent events using MarketBookAdd, all
the other Experts Advisors that have the OnBookEvent() handler will
receive this event. It is therefore necessary to analyze the name
of the symbol, which is passed to the handler as the</span>
<span class="f_li" style="font-style: italic;">const string&amp;
symbol</span> <span class="f_li">parameter.</span></p>

<p class="p_H3"><a class="help" name="onchartevent" id=
"onchartevent"></a><span class="f_H3">OnChartEvent</span>
</p>

<p class="p_Text"><span class="f_Text">OnChartEvent() is the
handler of a group of <a href="event_fire.htm#chartevent" class=
"topiclink">ChartEvent</a> events:</span>
</p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li">CHARTEVENT_KEYDOWN Â— event of a keystroke,
when the chart window is focused;</span>
</li>

<li><span class="f_li">CHARTEVENT_MOUSE_MOVE Â— mouse move events
and mouse click events (if <a href=
"enum_chart_property.htm#enum_chart_property_integer" class=
"topiclink">CHART_EVENT_MOUSE_MOVE</a>=true is set for the
chart);</span>
</li>

<li><span class="f_li">CHARTEVENT_OBJECT_CREATE Â— event of
graphical object creation (if <a href=
"enum_chart_property.htm#enum_chart_property_integer" class=
"topiclink">CHART_EVENT_OBJECT_CREATE</a>=true is set for the
chart);</span>
</li>

<li><span class="f_li">CHARTEVENT_OBJECT_CHANGE Â— event of change
of an object property via the properties dialog;</span>
</li>

<li><span class="f_li">CHARTEVENT_OBJECT_DELETE Â— event of
graphical object deletion (if <a href=
"enum_chart_property.htm#enum_chart_property_integer" class=
"topiclink">CHART_EVENT_OBJECT_DELETE</a>=true is set for the
chart);</span>
</li>

<li><span class="f_li">CHARTEVENT_CLICK Â— event of a mouse click on
the chart;</span>
</li>

<li><span class="f_li">CHARTEVENT_OBJECT_CLICK Â— event of a mouse
click in a graphical object belonging to the chart;</span>
</li>

<li><span class="f_li">CHARTEVENT_OBJECT_DRAG Â— event of a
graphical object move using the mouse;</span>
</li>

<li><span class="f_li">CHARTEVENT_OBJECT_ENDEDIT Â— event of the
finished text editing in the entry box of the LabelEdit graphical
object;</span>
</li>

<li><span class="f_li">CHARTEVENT_CHART_CHANGE &nbsp;Â— event of
chart changes;</span>
</li>

<li><span class="f_li">CHARTEVENT_CUSTOM+n Â— ID of the user event,
where n is in the range from 0 to 65535.</span>
</li>

<li><span class="f_li">CHARTEVENT_CUSTOM_LAST Â— the last acceptable
ID of a custom event (CHARTEVENT_CUSTOM +65535).</span>
</li>
</ul>

<p class="p_Text"><span class="f_Text">The function can be called
only in Expert Advisors and indicators. The function should be of
void type with 4 parameters:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnChartEvent</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;id,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Event&nbsp;ID</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">long</span><span class=
"f_CodeExample">&amp;&nbsp;lparam,&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Parameter&nbsp;of&nbsp;type&nbsp;long&nbsp;event</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;dparam,&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Parameter&nbsp;of&nbsp;type&nbsp;double&nbsp;event</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&amp;&nbsp;sparam&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Parameter&nbsp;of&nbsp;type&nbsp;string&nbsp;events</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">For each type of event, the
input parameters of the OnChartEvent() function have definite
values that are required for the processing of this event. The
events and values passed through these parameters are listed in the
table below.</span>
</p>

<div style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 8px 17px 7px 17px;">
<table class="EnumTable" cellspacing="0" cellpadding="5" border="1"
style=
"border:solid 2px #b1c2d6; border-spacing:0px; border-collapse:collapse;">
<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc" style=
"font-weight: bold;">Event</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc" style=
"font-weight: bold;">Value of the id parameter</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc" style=
"font-weight: bold;">Value of the lparam parameter</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc" style=
"font-weight: bold;">Value of the dparam parameter</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumDesc"><span class="f_EnumDesc" style=
"font-weight: bold;">Value of the sparam parameter</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of a
keystroke</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_KEYDOWN</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">code of a pressed
key</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Repeat count (the
number of times the keystroke is repeated as a result of the user
holding down the key)</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">The string value of
a bit mask describing the status of keyboard buttons</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Mouse events</span>
<span class="f_EnumDesc">(if property <a href=
"enum_chart_property.htm#enum_chart_property_integer" class=
"topiclink">CHART_EVENT_MOUSE_MOVE</a>=true is set for the
chart)</span></p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_EnumID"><span class=
"f_EnumID">CHARTEVENT_MOUSE_MOVE</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">the X
coordinate</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">the Y
coordinate</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">The string value of
a bit mask describing the status of mouse buttons</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of graphical object
creation</span> <span class="f_fortable">(if <a href=
"enum_chart_property.htm#enum_chart_property_integer" class=
"topiclink">CHART_EVENT_OBJECT_CREATE</a>=true is set for the
chart)</span></p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_OBJECT_CREATE</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Name of the created
graphical object</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of change of an
object property via the properties dialog</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_OBJECT_CHANGE</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Name of the modified
graphical object</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of graphical object
deletion</span> <span class="f_fortable">(if <a href=
"enum_chart_property.htm#enum_chart_property_integer" class=
"topiclink">CHART_EVENT_OBJECT_DELETE</a>=true is set for the
chart)</span></p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_OBJECT_DELETE</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Name of the deleted
graphical object</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of a mouse click on
the chart</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_CLICK</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">the X
coordinate</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">the Y
coordinate</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of a mouse click in
a graphical object belonging to the chart</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_OBJECT_CLICK</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">the X
coordinate</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">the Y
coordinate</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Name of the
graphical object, on which the event occurred</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of a graphical
object dragging using the mouse</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_OBJECT_DRAG</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Name of the moved
graphical object</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">Event of the finished text
editing in the entry box of the LabelEdit graphical object</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_OBJECT_ENDEDIT</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Name of the</span>
<span class="f_li">LabelEdit graphical object, in which text
editing has completed</span></p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Event of chart
Changes</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_CHART_CHANGE</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Â—</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_li">ID of the user event under
the N number</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">CHARTEVENT_CUSTOM+N</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Value set by the
<a href="eventchartcustom.htm" class=
"topiclink">EventChartCustom()</a> function</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Value set by the
<a href="eventchartcustom.htm" class=
"topiclink">EventChartCustom()</a> function</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">Value set by the
<a href="eventchartcustom.htm" class=
"topiclink">EventChartCustom()</a> function</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_H3"><a class="help" name="oncalculate" id=
"oncalculate"></a><span class="f_H3">OnCalculate</span>
</p>

<p class="p_Text"><span class="f_Text">The OnCalculate() function
is called only in custom indicators when it's necessary to
calculate the indicator values by the <a href=
"event_fire.htm#calculate" class="topiclink">Calculate</a> event.
This usually happens when a new tick is received for the symbol,
for which the indicator is calculated. This indicator is not
required to be attached to any price chart of this symbol.</span>
</p>

<p class="p_Text"><span class="f_Text">The OnCalculate() function
must have a return type int. There are two possible definitions.
Within one indicator you cannot use both versions of the
function.</span>
</p>

<p class="p_Text"><span class="f_Text">The first form is intended
for those indicators that can be calculated on a single data
buffer. An example of such an indicator is Custom Moving
Average.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnCalculate</span><span class=
"f_CodeExample">&nbsp;(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rates_total,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;size&nbsp;of&nbsp;the&nbsp;price[]&nbsp;array</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;prev_calculated,&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;bars&nbsp;handled&nbsp;on&nbsp;a&nbsp;previous&nbsp;call</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;begin,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;where&nbsp;the&nbsp;significant&nbsp;data&nbsp;start&nbsp;from</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;price[]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;array&nbsp;to&nbsp;calculate</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">As the price[] array, one of
timeseries or a calculated buffer of some indicator can be passed.
To determine the direction of indexing in the price[] array, call
<a href="arraygetasseries.htm" class=
"topiclink">ArrayGetAsSeries()</a>. In order not to depend on the
default values, you must unconditionally call the <a href=
"arraysetasseries.htm" class="topiclink">ArraySetAsSeries()</a>
function for those arrays, that are expected to work with.</span>
</p>

<p class="p_Text"><span class="f_Text">Necessary time series or an
indicator to be used as the price[] array can be selected by the
user in the "Parameters" tab when starting the indicator. To do
this, you should specify the necessary item in the drop-down list
of "Apply to" field.</span>
</p>

<p class="p_Text" style="text-align: center;"><img class="help"
src="applyto.png" width="446" height="264" alt=
"Selecting time series to calculate an indicator" title=
"Selecting time series to calculate an indicator" style=
"margin:0px auto 0px auto;width:446px;height:264px;border:none">
</p>

<p class="p_Text"><span class="f_Text">To receive values of a
custom indicator from other mql5 programs, the <a href=
"icustom.htm" class="topiclink">iCustom()</a> function is used,
which returns the indicator handle for subsequent operations. You
can also specify the appropriate price[] array or the handle of
another indicator. This parameter should be transmitted last in the
list of input variables of the custom indicator.</span><br>
<span class="f_Text" style="font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">terminal_path</span><span class=
"f_CodeExample">=</span><span class="f_CodeExample" style=
"color: #0000ff;">TerminalInfoString</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">STATUS_TERMINAL_PATH</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;handle_customMA=</span><span class=
"f_CodeExample" style="color: #0000ff;">iCustom</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">Symbol</span><span class=
"f_CodeExample">(),</span><span class="f_CodeExample" style=
"color: #0000ff;">PERIOD_CURRENT</span><span class=
"f_CodeExample">,&nbsp;</span><span class="f_CodeExample" style=
"color: #008080;">"Custom&nbsp;Moving&nbsp;Average"</span><span class="f_CodeExample">,13,0,&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">MODE_EMA</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #0000ff;">PRICE_TYPICAL</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(handle_customMA&gt;0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"handle_customMA&nbsp;=&nbsp;"</span><span class=
"f_CodeExample">,handle_customMA);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">else</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Cannot&nbsp;open&nbsp;or&nbsp;not&nbsp;EX5&nbsp;file&nbsp;'"</span><span class="f_CodeExample">+</span><span class="f_CodeExample"
style="color: #0000ff;">terminal_path</span><span class=
"f_CodeExample">+</span><span class="f_CodeExample" style=
"color: #008080;">"\\MQL5\\Indicators\\"</span><span class=
"f_CodeExample">+</span><span class="f_CodeExample" style=
"color: #008080;">"Custom&nbsp;Moving&nbsp;Average.ex5'"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">In this example, the last
parameter passed is the PRICE_TYPICAL value (from the <a href=
"prices.htm#enum_applied_price_enum" class=
"topiclink">ENUM_APPLIED_PRICE</a> enumeration), which indicates
that the custom indicator will be built on typical prices obtained
as (High+Low+Close)/3. If this parameter is not specified, the
indicator is built based on PRICE_CLOSE values, i.e. closing prices
of each bar.</span>
</p>

<p class="p_Text"><span class="f_Text">Another example that shows
passing of the indicator handler as the last parameter to specify
the price[] array, is given in the description of the <a href=
"icustom.htm" class="topiclink">iCustom()</a> function.</span><br>
<span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><a class="help" name="oncalculate2" id=
"oncalculate2"></a><span class="f_Text">The second form is intended
for all other indicators, in which more than one time series is
used for calculations.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnCalculate</span><span class=
"f_CodeExample">&nbsp;(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rates_total,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;size&nbsp;of&nbsp;input&nbsp;time&nbsp;series</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;prev_calculated,&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;bars&nbsp;handled&nbsp;in&nbsp;previous&nbsp;call</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">datetime</span><span class=
"f_CodeExample">&amp;&nbsp;time[],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Time</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;open[],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Open</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;high[],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;High</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;low[],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Low</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;close[],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Close</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">long</span><span class=
"f_CodeExample">&amp;&nbsp;tick_volume[],&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Tick&nbsp;Volume</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">long</span><span class=
"f_CodeExample">&amp;&nbsp;volume[],&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Real&nbsp;Volume</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&amp;&nbsp;spread[]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Spread</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Parameters of open[],
high[], low[] and close[] contain arrays with open prices, high and
low prices and close prices of the current time frame. The time[]
parameter contains an array with open time values, the spread[]
parameter has an array containing the history of spreads (if any
spread is provided for the traded security). The parameters of
volume[] and tick_volume[] contain the history of trade and tick
volume, respectively.</span>
</p>

<p class="p_Text"><span class="f_Text">To determine the indexing
direction of time[], open[], high[], low[], close[], tick_volume[],
volume[] and spread[], call <a href="arraygetasseries.htm" class=
"topiclink">ArrayGetAsSeries()</a>. In order not to depend on
default values, you should unconditionally call the <a href=
"arraysetasseries.htm" class="topiclink">ArraySetAsSeries()</a>
function for those arrays, which are expected to work with.</span>
</p>

<p class="p_Text"><span class="f_Text">The first rates_total
parameter contains the number of bars, available to the indicator
for calculation, and corresponds to the number of bars available in
the chart.</span>
</p>

<p class="p_Text"><span class="f_Text">We should note the
connection between the return value of OnCalculate() and the second
input parameter prev_calculated. During the function call, the
prev_calculated parameter contains a value</span> <span class=
"f_Text" style="font-weight: bold;">returned</span> <span class=
"f_Text">by OnCalculate() during</span> <span class="f_Text" style=
"font-weight: bold;">previous</span> <span class="f_Text">call.
This allows for economical algorithms for calculating the custom
indicator in order to avoid repeated calculations for those bars
that haven't changed since the previous run of this
function.</span></p>

<p class="p_Text"><span class="f_Text">For this, it is usually
enough to return the value of the rates_total parameter, which
contains the number of bars in the current function call. If since
the last call of OnCalculate() price data has changed (a deeper
history downloaded or history blanks filled), the value of the
input parameter prev_calculated will be set to zero by the
terminal.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Note:</span> <span class="f_Text">if
OnCalculate returns zero, then the indicator values are not shown
in the DataWindow of the client terminal.</span></p>

<p class="p_Text"><span class="f_Text">To understand it better, it
would be useful to start the indicator, which code is attached
below.</span>
</p>

<p class="p_li"><span class="f_li" style=
"font-weight: bold;">Indicator Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">indicator_chart_window</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">indicator_buffers</span><span class=
"f_CodeExample">&nbsp;1</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">indicator_plots</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;1</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//----&nbsp;plot&nbsp;Line</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">indicator_label1</span><span class=
"f_CodeExample">&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #008080;">"Line"</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">indicator_type1</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">DRAW_LINE</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">indicator_color1</span><span class=
"f_CodeExample">&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">clrDarkBlue</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;indicator_style1&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">STYLE_SOLID</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">indicator_width1</span><span class=
"f_CodeExample">&nbsp;&nbsp;1</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;indicator&nbsp;buffers</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LineBuffer[];</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Custom&nbsp;indicator&nbsp;initialization&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnInit</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;indicator&nbsp;buffers&nbsp;mapping</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">SetIndexBuffer</span><span class=
"f_CodeExample">(0,LineBuffer,</span><span class="f_CodeExample"
style="color: #0000ff;">INDICATOR_DATA</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">INIT_SUCCEEDED</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Custom&nbsp;indicator&nbsp;iteration&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnCalculate</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rates_total,</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;prev_calculated,</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">datetime</span><span class=
"f_CodeExample">&amp;&nbsp;time[],</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;open[],</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;high[],</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;low[],</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&amp;&nbsp;close[],</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">long</span><span class=
"f_CodeExample">&amp;&nbsp;tick_volume[],</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">long</span><span class=
"f_CodeExample">&amp;&nbsp;volume[],</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&amp;&nbsp;spread[])</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Get&nbsp;the&nbsp;number&nbsp;of&nbsp;bars&nbsp;available&nbsp;for&nbsp;the&nbsp;current&nbsp;symbol&nbsp;and&nbsp;chart&nbsp;period</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">bars</span><span class=
"f_CodeExample">=</span><span class="f_CodeExample" style=
"color: #0000ff;">Bars</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">Symbol</span><span class=
"f_CodeExample">(),0);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Bars&nbsp;=&nbsp;"</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #0000ff;">bars</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #008080;">",&nbsp;rates_total&nbsp;=&nbsp;"</span><span class="f_CodeExample">,rates_total,</span><span class="f_CodeExample"
style=
"color: #008080;">",&nbsp;&nbsp;prev_calculated&nbsp;=&nbsp;"</span><span class="f_CodeExample">,prev_calculated);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"time[0]&nbsp;=&nbsp;"</span><span class=
"f_CodeExample">,time[0],</span><span class="f_CodeExample" style=
"color: #008080;">"&nbsp;time[rates_total-1]&nbsp;=&nbsp;"</span><span class="f_CodeExample">,time[rates_total-1]);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;return&nbsp;value&nbsp;of&nbsp;prev_calculated&nbsp;for&nbsp;next&nbsp;call</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(rates_total);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="running.htm"
class="topiclink">Running Programs</a>, <a href="event_fire.htm"
class="topiclink">Client Terminal Events</a>, <a href=
"eventfunctions.htm" class="topiclink">Working with
Events</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
