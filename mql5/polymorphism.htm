<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Polymorphism</title>
<meta name="keywords" content="">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "polymorphism.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=polymorphism.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=polymorphism.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="oop.htm">Object-Oriented Programming</a> /
Polymorphism</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="inheritance.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="overload.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Polymorphism</span>
</p>

<p class="p_Text"><span class="f_Text">Polymorphism is an
opportunity for different classes of objects, related through
inheritance, to respond in various ways when calling the same
function element. It helps to create a universal mechanism
describing the behavior of not only the base class, but also
descendant classes.</span>
</p>

<p class="p_Text"><span class="f_Text">Let's continue to develop a
base class CShape, and define a member function GetArea(), designed
to calculate the area of a shape. In all the descendant classes,
produced by inheritance from the base class, we redefine this
function in accordance with rules of calculating the area of a
particular shape.</span>
</p>

<p class="p_Text"><span class="f_Text">For a square (class
CSquare), the area is calculated through its sides, for a circle
(class CCircle), area is expressed through its radius etc. We can
create an array to store objects of CShape type, in which both
objects of a base class and those of all descendant classes can be
stored. Further we can call the same function for each element of
the array.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Base&nbsp;class</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CShape</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">protected</span><span class=
"f_CodeExample">:&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;Shape&nbsp;type</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_xpos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;X&nbsp;-&nbsp;coordinate&nbsp;of&nbsp;the&nbsp;base&nbsp;point</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_ypos;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Y&nbsp;-&nbsp;coordinate&nbsp;of&nbsp;the&nbsp;base&nbsp;point</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CShape(){m_type=</span><span class="f_CodeExample"
style="color: #008080;">0</span><span class=
"f_CodeExample">;};&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;constructor,&nbsp;type=0</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetType(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(m_type);};</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;returns&nbsp;type&nbsp;of&nbsp;the&nbsp;shape</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">virtual</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetArea(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;(</span><span class="f_CodeExample" style=
"color: #008080;">0</span><span class=
"f_CodeExample">);&nbsp;}</span><span class="f_CodeExample" style=
"color: #808080;">//&nbsp;returns&nbsp;area&nbsp;of&nbsp;the&nbsp;shape</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Now, all of the derived
classes have a member function getArea(), which returns a zero
value. The implementation of this function in each descendant will
vary.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;The&nbsp;derived&nbsp;class&nbsp;Circle</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CCircle&nbsp;:&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">public</span><span class=
"f_CodeExample">&nbsp;CShape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;After&nbsp;a&nbsp;colon&nbsp;we&nbsp;define&nbsp;the&nbsp;base&nbsp;class</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;from&nbsp;which&nbsp;inheritance&nbsp;is&nbsp;made</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_radius;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;circle&nbsp;radius</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCircle(){m_type=</span><span class="f_CodeExample"
style="color: #008080;">1</span><span class=
"f_CodeExample">;};&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;constructor,&nbsp;type=1&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetRadius(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;r){m_radius=r;};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">virtual</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;GetArea(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;(</span><span class="f_CodeExample" style=
"color: #008080;">3</span><span class=
"f_CodeExample">.</span><span class="f_CodeExample" style=
"color: #008080;">14</span><span class=
"f_CodeExample">*m_radius*m_radius);}</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;circle&nbsp;area</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">For the class Square the
declaration is the same:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;The&nbsp;derived&nbsp;class&nbsp;Square</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CSquare&nbsp;:&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">public</span><span class=
"f_CodeExample">&nbsp;CShape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;After&nbsp;a&nbsp;colon&nbsp;we&nbsp;define&nbsp;the&nbsp;base&nbsp;class</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;from&nbsp;which&nbsp;inheritance&nbsp;is&nbsp;made</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">double&nbsp;</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_square_side;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;square&nbsp;side</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSquare(){m_type=</span><span class="f_CodeExample"
style="color: #008080;">2</span><span class=
"f_CodeExample">;};&nbsp;</span><span class="f_CodeExample" style=
"color: #808080;">//&nbsp;constructor,&nbsp;type=1</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetSide(</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;s){m_square_side=s;};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">virtual</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double&nbsp;</span><span class=
"f_CodeExample">&nbsp;GetArea(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;(m_square_side*m_square_side);}</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;square&nbsp;area</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">For calculating the area of
the square and circle, we need the corresponding values of m_radius
and m_square_side, so we have added the functions SetRadius() and
SetSide() in the declaration of the corresponding class.</span>
</p>

<p class="p_Text"><span class="f_Text">It is assumed that object of
different types (CCircle and CSquare) derived from one base type
CShape are used in our program. Polymorphism allows creating an
array of objects of the base CShape class, but when declaring this
array, these objects are yet unknown and their type is
undefined.</span>
</p>

<p class="p_Text"><span class="f_Text">The decision on what type of
object will be contained in each element of the array will be taken
directly during program execution. This involves the <a href=
"newoperator.htm" class="topiclink">dynamic creation</a> of objects
of the appropriate classes, and hence the necessity to use <a href=
"object_pointers.htm" class="topiclink">object pointers</a> instead
of objects.</span>
</p>

<p class="p_Text"><span class="f_Text">The <a href=
"newoperator.htm" class="topiclink">new</a> operator is used for
dynamic creation of objects. Each such object must be individually
and explicitly deleted using the <a href="deleteoperator.htm"
class="topiclink">delete</a> operator. Therefore we will declare an
array of pointers of CShape type, and create an object of a proper
type for each element (</span><span class="f_Text" style=
"font-weight: bold;">new Class_Name)</span><span class="f_Text">,
as shown in the following script example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Declare&nbsp;an&nbsp;array&nbsp;of&nbsp;object&nbsp;pointers&nbsp;of&nbsp;the&nbsp;base&nbsp;type&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CShape&nbsp;*shapes[5];&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;An&nbsp;array&nbsp;of&nbsp;pointers&nbsp;to&nbsp;CShape&nbsp;object</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Here&nbsp;fill&nbsp;in&nbsp;the&nbsp;array&nbsp;with&nbsp;derived&nbsp;objects</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Declare&nbsp;a&nbsp;pointer&nbsp;to&nbsp;the&nbsp;object&nbsp;of&nbsp;CCircle&nbsp;type</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CCircle&nbsp;*circle=</span><span class="f_CodeExample"
style="color: #0000ff;">new</span><span class=
"f_CodeExample">&nbsp;CCircle();</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Set&nbsp;object&nbsp;properties&nbsp;at&nbsp;the&nbsp;circle&nbsp;pointer</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;circle.SetRadius(2.5);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Place&nbsp;the&nbsp;pointer&nbsp;value&nbsp;in&nbsp;shapes[0]</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;shapes[0]=circle;</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Create&nbsp;another&nbsp;CCircle&nbsp;object&nbsp;and&nbsp;write&nbsp;down&nbsp;its&nbsp;pointer&nbsp;in&nbsp;shapes[1]</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;circle=</span><span class=
"f_CodeExample" style="color: #0000ff;">new</span><span class=
"f_CodeExample">&nbsp;CCircle();</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;shapes[1]=circle;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;circle.SetRadius(5);</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Here&nbsp;we&nbsp;intentionally&nbsp;"forget"&nbsp;to&nbsp;set&nbsp;a&nbsp;value&nbsp;for&nbsp;shapes[2]</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//circle=new&nbsp;CCircle();</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//circle.SetRadius(10);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//shapes[2]=circle;</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Set&nbsp;NULL&nbsp;for&nbsp;the&nbsp;element&nbsp;that&nbsp;is&nbsp;not&nbsp;used</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;shapes[2]=</span><span class=
"f_CodeExample" style="color: #0000ff;">NULL</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Create&nbsp;a&nbsp;CSquare&nbsp;object&nbsp;and&nbsp;write&nbsp;down&nbsp;its&nbsp;pointer&nbsp;to&nbsp;shapes[3]</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CSquare&nbsp;*square=</span><span class="f_CodeExample"
style="color: #0000ff;">new</span><span class=
"f_CodeExample">&nbsp;CSquare();</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;square.SetSide(5);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;shapes[3]=square;</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Create&nbsp;a&nbsp;CSquare&nbsp;object&nbsp;and&nbsp;write&nbsp;down&nbsp;its&nbsp;pointer&nbsp;to&nbsp;shapes[4]</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;square=</span><span class=
"f_CodeExample" style="color: #0000ff;">new</span><span class=
"f_CodeExample">&nbsp;CSquare();</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;square.SetSide(10);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;shapes[4]=square;</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;We&nbsp;have&nbsp;an&nbsp;array&nbsp;of&nbsp;pointers,&nbsp;get&nbsp;its&nbsp;size</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;total=</span><span class="f_CodeExample"
style="color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(shapes);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Pass&nbsp;in&nbsp;a&nbsp;loop&nbsp;through&nbsp;all&nbsp;pointers&nbsp;in&nbsp;the&nbsp;array&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;&nbsp;i&lt;5;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;If&nbsp;the&nbsp;pointer&nbsp;at&nbsp;the&nbsp;specified&nbsp;index&nbsp;is&nbsp;valid</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">if</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">CheckPointer</span><span class=
"f_CodeExample">(shapes[i])!=</span><span class="f_CodeExample"
style="color: #0000ff;">POINTER_INVALID</span><span class=
"f_CodeExample">)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Log&nbsp;the&nbsp;type&nbsp;and&nbsp;square&nbsp;of&nbsp;the&nbsp;shape</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"The&nbsp;object&nbsp;of&nbsp;type&nbsp;%d&nbsp;has&nbsp;the&nbsp;square&nbsp;%G"</span><span class="f_CodeExample">,</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shapes[i].GetType(),</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shapes[i].GetArea());</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;If&nbsp;the&nbsp;pointer&nbsp;has&nbsp;type&nbsp;POINTER_INVALID</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">else</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Notify&nbsp;of&nbsp;an&nbsp;error</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Object&nbsp;shapes[%d]&nbsp;has&nbsp;not&nbsp;been&nbsp;initialized!&nbsp;Its&nbsp;pointer&nbsp;is&nbsp;%s"</span><span class="f_CodeExample">,</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,</span><span class="f_CodeExample"
style="color: #0000ff;">EnumToString</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">CheckPointer</span><span class=
"f_CodeExample">(shapes[i])));</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;We&nbsp;must&nbsp;delete&nbsp;all&nbsp;created&nbsp;dynamic&nbsp;objects</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;total;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;We&nbsp;can&nbsp;delete&nbsp;only&nbsp;the&nbsp;objects&nbsp;with&nbsp;pointers&nbsp;of&nbsp;POINTER_DYNAMIC&nbsp;type</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">if</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">CheckPointer</span><span class=
"f_CodeExample">(shapes[i])==</span><span class="f_CodeExample"
style="color: #0000ff;">POINTER_DYNAMIC</span><span class=
"f_CodeExample">)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Notify&nbsp;of&nbsp;deletion</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Deleting&nbsp;shapes[%d]"</span><span class=
"f_CodeExample">,i);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//---&nbsp;Delete&nbsp;an&nbsp;object&nbsp;by&nbsp;its&nbsp;pointer</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">delete</span><span class=
"f_CodeExample">&nbsp;shapes[i];</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Please note that when
deleting an object using the <a href="deleteoperator.htm" class=
"topiclink">delete</a> operator, <a href="enum_pointer_type.htm"
class="topiclink">the type of its pointer</a> must be checked. Only
objects with the <a href="enum_pointer_type.htm" class=
"topiclink">POINTER_DYNAMIC</a> pointer can be deleted using
delete. For pointers of other type, an error will be
returned.</span>
</p>

<p class="p_Text"><span class="f_Text">But besides the redefining
of functions during inheritance, polymorphism also includes the
implementation of one and the same functions with different sets of
parameters within a class. This means that the class may have
several functions with the same name but with a different type
and/or set of parameters. In this case, polymorphism is implemented
through the <a href="functionoverload.htm" class=
"topiclink">function overload</a>.</span>
</p>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href=
"standardlibrary.htm" class="topiclink">Standard Library</a></span>
</p>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
