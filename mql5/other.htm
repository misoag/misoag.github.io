<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Other Operations</title>
<meta name="keywords" content=",,[,]">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "other.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=other.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=other.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="operations.htm">Operations and Expressions</a> / Other
Operations</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="bit.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="rules.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Other operations</span>
</p>

<p class="p_H2"><span class="f_H2">Indexing ( [] )</span>
</p>

<p class="p_Text"><span class="f_Text">When addressing the i-th
element of the array, the expression value is the value of a
variable with the serial number i.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">array[i]&nbsp;=&nbsp;</span><span class=
"f_CodeExample" style="color: #008080;">3</span><span class=
"f_CodeExample">;&nbsp;</span><span class="f_CodeExample" style=
"color: #808080;">//&nbsp;Assign&nbsp;the&nbsp;value&nbsp;of&nbsp;3&nbsp;to&nbsp;i-th&nbsp;element&nbsp;of&nbsp;the&nbsp;array.</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Only an integer can be index
of an array. Four-dimensional and below arrays are allowed. Each
measurement is indexed from 0 to</span> <span class="f_Text" style=
"font-weight: bold;">measurement size</span><span class=
"f_Text">-1. In particular case, for a one-dimensional array
consisting of 50 elements, the reference to the first element will
look like array [0], that to the last element will be array
[49].</span></p>

<p class="p_Text"><span class="f_Text">When addressing beyond the
array, the executing subsystem will generate a critical error, and
the program will be stopped.</span>
</p>

<p class="p_H2"><span class="f_H2">Calling Function with x1, x2
,..., xn Arguments</span>
</p>

<p class="p_Text"><span class="f_Text">Each argument can represent
a constant, variable, or expression of the corresponding type. The
arguments passed are separated by commas and must be inside of
parentheses, the opening parenthesis must follow the name of the
called function.</span>
</p>

<p class="p_Text"><span class="f_Text">The expression value is the
value returned by the function. If the return value is of void
type, such function call cannot be placed to the right in the
assignment operation. Please make sure that the expressions x1,...,
xn are executed exactly in this order.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">&nbsp;&nbsp;&nbsp;int</span><span class=
"f_CodeExample">&nbsp;length=</span><span class="f_CodeExample"
style="color: #339966;">1000000</span><span class=
"f_CodeExample">;&nbsp;&nbsp;&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">&nbsp;&nbsp;&nbsp;string</span><span class=
"f_CodeExample">&nbsp;a=</span><span class="f_CodeExample" style=
"color: #008080;">"a"</span><span class=
"f_CodeExample">,b=</span><span class="f_CodeExample" style=
"color: #008080;">"b"</span><span class=
"f_CodeExample">,c;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---Other&nbsp;Operations</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;start=</span><span class="f_CodeExample"
style="color: #0000ff;">GetTickCount</span><span class=
"f_CodeExample">(),stop;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">long</span><span class=
"f_CodeExample">&nbsp;i;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(i=</span><span class="f_CodeExample" style=
"color: #339966;">0</span><span class=
"f_CodeExample">;i&lt;length;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c=a+b;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;stop=</span><span class=
"f_CodeExample" style=
"color: #0000ff;">GetTickCount</span><span class=
"f_CodeExample">();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"time&nbsp;for&nbsp;'c&nbsp;=&nbsp;a&nbsp;+&nbsp;b'&nbsp;=&nbsp;"</span><span class="f_CodeExample">,(stop-start),</span><span class="f_CodeExample"
style=
"color: #008080;">"&nbsp;milliseconds,&nbsp;i&nbsp;=&nbsp;"</span><span class="f_CodeExample">,i);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_H2"><span class="f_H2">Comma Operation ( , )</span>
</p>

<p class="p_Text"><span class="f_Text">Expressions separated by
commas are executed from left to right. All side effects of the
left expression calculation can appear before the right expression
is calculated. The result type and value coincide with those of the
right expression. The list of parameters to be passed (see above)
can be considered as an example.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">for</span><span class=
"f_CodeExample">(i=</span><span class="f_CodeExample" style=
"color: #008000;">0</span><span class=
"f_CodeExample">,j=</span><span class="f_CodeExample" style=
"color: #008000;">99</span><span class=
"f_CodeExample">;&nbsp;i&lt;</span><span class="f_CodeExample"
style="color: #008000;">100</span><span class=
"f_CodeExample">;&nbsp;i++,j--)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(array[i][j]);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_H2"><a class="help" name="operation_dot" id=
"operation_dot"></a><span class="f_H2">Dot Operator ( . )</span>
</p>

<p class="p_Text"><span class="f_Text">For the direct <a href=
"classes.htm#dot_operation" class="topiclink">access to the public
members</a> of structures and classes the dot operation is used.
Syntax:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">Variable_name_of_structure_type.Member_name</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;SessionTime</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;sessionName;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;startHour;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;startMinutes;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;endHour;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;endMinutes;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;st;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;st.sessionName=</span><span class="f_CodeExample"
style="color: #008080;">"Asian"</span><span class=
"f_CodeExample">;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;st.startHour=0;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;st.startMinutes=0;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;st.endHour=9;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;st.endMinutes=0;</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_H2"><a class="help" name="context_allow" id=
"context_allow"></a><span class="f_H2">Scope Resolution Operation (
:: )</span>
</p>

<p class="p_Text"><span class="f_Text">Each function in a mql5
program has its own execution scope. For example, the <a href=
"print.htm" class="topiclink">Print()</a> system function is
performed in a global scope. <a href="import.htm" class=
"topiclink">Imported</a> functions are called in the scope of the
corresponding import. Method functions of <a href=
"classes.htm#class" class="topiclink">classes</a> have the scope of
the corresponding class. The syntax of the scope resolution
operation is as follows:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">[Scope_name]::Function_name(parameters)</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">If there is no scope name,
this is the explicit direction to use the global scope. If there is
no scope resolution operation, the function is sought in the
nearest scope. If there is no function in the local scope, the
search is conducted in the global scope.</span>
</p>

<p class="p_Text"><span class="f_Text">The scope resolution
operation is also used to <a href=
"function.htm#function_definition" class="topiclink">define
function</a>-class member.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">type&nbsp;Class_name::Function_name(parameters_description)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">//&nbsp;function&nbsp;body</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Use of several functions of
the same name from different execution contexts in a program may
cause ambiguity. The priority order of function calls without
explicit scope specification is the following:</span>
</p>

<ol class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li">Class methods. If no function with the
specified name is set in the class, move to the next level.</span>
</li>

<li><span class="f_li">MQL5 functions. If the language does not
have such a function, move to the next level.</span>
</li>

<li><span class="f_li">User defined global functions. If no
function with the specified name is found, move to the next
level.</span>
</li>

<li><span class="f_li">Imported functions. If no function with the
specified name is found, the compiler returns an error.</span>
</li>
</ol>

<p class="p_li"><span class="f_Text">To avoid the ambiguity of
function calls, always explicitly specify the function scope using
the scope resolution operation</span><span class="f_li">.</span>
</p>

<p class="p_li"><span class="f_li">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">#property</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">script_show_inputs</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#import&nbsp;</span><span class="f_CodeExample"
style="color: #008080;">"kernel32.dll"</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">GetLastError</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">#import</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CCheckContext</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_id;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCheckContext()&nbsp;{&nbsp;m_id=1234;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">protected</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">GetLastError</span><span class=
"f_CodeExample">()&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(m_id);&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CCheckContext2&nbsp;:&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">public</span><span class=
"f_CodeExample">&nbsp;CCheckContext</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_id2;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CCheckContext2()&nbsp;{&nbsp;m_id2=5678;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">();</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">protected</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">GetLastError</span><span class=
"f_CodeExample">()&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(m_id2);&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;CCheckContext2::</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;::</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Terminal&nbsp;GetLastError"</span><span class=
"f_CodeExample">,::</span><span class="f_CodeExample" style=
"color: #0000ff;">GetLastError</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;::</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"kernel32&nbsp;GetLastError"</span><span class=
"f_CodeExample">,kernel32::</span><span class="f_CodeExample"
style="color: #0000ff;">GetLastError</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;::</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"parent&nbsp;GetLastError"</span><span class=
"f_CodeExample">,CCheckContext::</span><span class="f_CodeExample"
style="color: #0000ff;">GetLastError</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;::</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"our&nbsp;GetLastError"</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #0000ff;">GetLastError</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}&nbsp;&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CCheckContext2&nbsp;test;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;test.</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_H2"><a class="help" name="sizeof" id=
"sizeof"></a><span class="f_H2">Operation of Obtaining Data Type
Size or Size of Any Data Type Object ( sizeof )</span>
</p>

<p class="p_Text"><span class="f_Text">Using the</span>
<span class="f_Text" style="color: #0000ff;">sizeof</span>
<span class="f_Text">operation, the memory size corresponding to an
identifier or type can be defined. The sizeof operation is of the
following format:</span></p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">sizeof</span><span class=
"f_CodeExample">(expression)</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Any identifier, or type name
enclosed in brackets can be used as an expression. Note that the
void type name can't be used, and the identifier cannot belong to
the field of bits, or be a function name.</span>
</p>

<p class="p_Text"><span class="f_Text">If the expression is the
name of a static array (i.e. the first dimension is given), then
the result is the size of the whole array (i.e. the product of the
number of elements and the length of the type). If the expression
is the name of a dynamic array (the first dimension is not
specified), the result will be the size of the object of the
<a href="dynamic_array.htm" class="topiclink">dynamic
array</a>.</span>
</p>

<p class="p_Text"><span class="f_Text">When sizeof is applied to
the name of structure or class type, or to the identifier of the
structure or class type, the result is the actual size of the
structure or class.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;myStruct</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">char</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;h;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;b;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;f;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;str;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"sizeof(str)&nbsp;=&nbsp;"</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #0000ff;">sizeof</span><span class=
"f_CodeExample">(str));</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"sizeof(myStruct)&nbsp;=&nbsp;"</span><span class="f_CodeExample">,</span><span class="f_CodeExample"
style="color: #0000ff;">sizeof</span><span class=
"f_CodeExample">(myStruct));&nbsp;&nbsp;&nbsp;</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The size is calculated at
the compilation stage.</span>
</p>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="rules.htm"
class="topiclink">Precedence Rules</a></span>
</p>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
