<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Real Types (double, float)</title>
<meta name="keywords" content="double,float">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "double.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=double.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=double.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="types.htm">Data Types</a> / Real Types (double,
float)</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="enumeration.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="stringconst.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Real Types (double,
float)</span>
</p>

<p class="p_Text"><span class="f_Text">Real types (or
floating-point types) represent values with a fractional part. In
the MQL5 language there are two types for floating point
numbers.The method of representation of real numbers in the
computer memory is defined by the IEEE 754 standard and is
independent of platforms, operating systems or programming
languages.</span>
</p>

<div style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 0px; margin: 8px 17px 7px 17px;">
<table class="EnumTable" cellspacing="0" cellpadding="5" border="1"
style=
"border:solid 2px #b1c2d6; border-spacing:0px; border-collapse:collapse;">
<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable" style=
"font-weight: bold;">Type</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable" style=
"font-weight: bold;">Size in bytes</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable" style=
"font-weight: bold;">Minimal Positive Value</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable" style=
"font-weight: bold;">Maximum Value</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable" style=
"font-weight: bold;">Representation Accuracy</span>
</p>
</td>
<td style=
"vertical-align:top; background-color:#dbe9f9; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable" style=
"font-weight: bold;">C++ Analog</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">float</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">4</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">1.175494351e-38</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">3.402823466e+38</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">7 significant
digits</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">float</span>
</p>
</td>
</tr>

<tr style="text-align:left;vertical-align:top;">
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">double</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">8</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">2.2250738585072014e-308</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class=
"f_fortable">1.7976931348623158e+308</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">15 significant
digits</span>
</p>
</td>
<td style=
"vertical-align:top; padding:5px; border:solid 1px #b1c2d6;">
<p class="p_fortable"><span class="f_fortable">double</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The</span> <span class=
"f_Text" style="color: #0000ff;">double</span> <span class=
"f_Text">name means that the accuracy of these numbers is twice the
accuracy of the</span> <span class="f_Text" style=
"color: #0000ff;">float</span> <span class="f_Text">type numbers.
In most cases, the</span> <span class="f_Text" style=
"color: #0000ff;">double</span> <span class="f_Text">type is the
most convenient one. In many cases the limited precision of</span>
<span class="f_Text" style="color: #0000ff;">float</span>
<span class="f_Text">numbers is not enough. The reason why
the</span> <span class="f_Text" style=
"color: #0000ff;">float</span> <span class="f_Text">type is still
used is saving the memory (this is important for large arrays of
real numbers).</span></p>

<p class="p_Text"><span class="f_Text">Floating-point constants
consist of an integer part, a point (.) and the fractional part.
The integer and fractional parts are sequences of decimal
digits.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Examples:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample" style="color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">a=</span><span class="f_CodeExample" style=
"color: #008000;">12.111</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample" style="color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">b=-</span><span class="f_CodeExample" style=
"color: #008000;">956.1007</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">float</span><span class=
"f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;</span><span class=
"f_CodeExample">c</span><span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">=</span><span class="f_CodeExample" style=
"color: #008000;">0.0001</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">float</span><span class=
"f_CodeExample" style=
"color: #ffffff;">&nbsp;&nbsp;</span><span class=
"f_CodeExample">d</span><span class="f_CodeExample" style=
"color: #ffffff;">&nbsp;</span><span class=
"f_CodeExample">=</span><span class="f_CodeExample" style=
"color: #008000;">16</span><span class="f_CodeExample">;</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">There is a scientific way of
writing real constants, often this method of recording is more
compact than the traditional one.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;double&nbsp;c1=</span><span class="f_CodeExample"
style="color: #008000;">1.12123515e</span><span class=
"f_CodeExample">-</span><span class="f_CodeExample" style=
"color: #008000;">25</span><span class="f_CodeExample">;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;double&nbsp;c2=</span><span class="f_CodeExample"
style=
"color: #008000;">0.000000000000000000000000112123515</span><span class="f_CodeExample">;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;24&nbsp;zero&nbsp;after&nbsp;the&nbsp;decimal&nbsp;point</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">("</span><span class="f_CodeExample" style=
"color: #008000;">1.</span><span class=
"f_CodeExample">&nbsp;c1&nbsp;=",</span><span class="f_CodeExample"
style="color: #0000ff;">DoubleToString</span><span class=
"f_CodeExample">(c1,</span><span class="f_CodeExample" style=
"color: #008000;">16</span><span class=
"f_CodeExample">));</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Result:&nbsp;1.&nbsp;c1&nbsp;=&nbsp;0.0000000000000000</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">("</span><span class="f_CodeExample" style=
"color: #008000;">2.</span><span class=
"f_CodeExample">&nbsp;c1&nbsp;=",</span><span class="f_CodeExample"
style="color: #0000ff;">DoubleToString</span><span class=
"f_CodeExample">(c1,-</span><span class="f_CodeExample" style=
"color: #008000;">16</span><span class=
"f_CodeExample">));</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Result:&nbsp;2.&nbsp;c1&nbsp;=&nbsp;1.1212351499999999e-025</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">("</span><span class="f_CodeExample" style=
"color: #008000;">3.</span><span class=
"f_CodeExample">&nbsp;c2&nbsp;=",</span><span class="f_CodeExample"
style="color: #0000ff;">DoubleToString</span><span class=
"f_CodeExample">(c2,-</span><span class="f_CodeExample" style=
"color: #008000;">16</span><span class=
"f_CodeExample">));</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;Result:&nbsp;3.&nbsp;c2&nbsp;=&nbsp;1.1212351499999999e-025</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">It should be remembered that
real numbers are stored in memory with some limited accuracy in the
binary system, while generally the decimal notation is used. That's
why many numbers that are precisely represented in the decimal
system can be written only as an infinite fraction in the binary
system.</span>
</p>

<p class="p_Text"><span class="f_Text">For example, numbers 0.3 and
0.7 are represented in the computer as infinite fractions, while
the number of 0.25 is stored exactly, because it represents the
power of two.</span>
</p>

<p class="p_Text"><span class="f_Text">In this regard, it is
strongly recommended not to <a href="relation.htm" class=
"topiclink">compare</a> two real numbers for equality, because such
a comparison is not correct.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;three=3.0;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;x,y,z;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;x=1/three;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;y=4/three;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;z=5/three;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(x+y==z)&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"1/3&nbsp;+&nbsp;4/3&nbsp;==&nbsp;5/3"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">else</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"1/3&nbsp;+&nbsp;4/3&nbsp;!=&nbsp;5/3"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;Result:&nbsp;1/3&nbsp;+&nbsp;4/3&nbsp;!=&nbsp;5/3</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">If you still need to compare
the equality of two real numbers, then you can do this in two
different ways. The first way is to compare the difference between
two numbers with some small quantity that specifies the accuracy of
comparison.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">bool</span><span class=
"f_CodeExample">&nbsp;EqualDoubles(</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;d1,</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;d2,</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;epsilon)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(epsilon&lt;0)&nbsp;epsilon=-epsilon;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(d1-d2&gt;epsilon)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">false</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(d1-d2&lt;-epsilon)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">false</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">true</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;d_val=0.7;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">float</span><span class=
"f_CodeExample">&nbsp;&nbsp;f_val=0.7;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(EqualDoubles(d_val,f_val,0.000000000000001))&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(d_val,</span><span class="f_CodeExample" style=
"color: #008080;">"&nbsp;equals&nbsp;"</span><span class=
"f_CodeExample">,f_val);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">else</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Different:&nbsp;d_val&nbsp;=&nbsp;"</span><span class="f_CodeExample">,</span><span class="f_CodeExample"
style="color: #0000ff;">DoubleToString</span><span class=
"f_CodeExample">(d_val,16),</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #008080;">"&nbsp;&nbsp;f_val&nbsp;=&nbsp;"</span><span class="f_CodeExample">,</span><span class="f_CodeExample"
style="color: #0000ff;">DoubleToString</span><span class=
"f_CodeExample">(f_val,16));</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;Result:&nbsp;Different:&nbsp;d_val=&nbsp;0.7000000000000000&nbsp;&nbsp;&nbsp;f_val=&nbsp;0.6999999880790710</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Noted that the value of
epsilon in the above example can not be less than the predefined
constant DBL_EPSILON. The value of this constant is
2.2204460492503131e-016. The constant corresponding to the float
type is FLT_EPSILON = 1.192092896e-07. The meaning of these values
is the following: it is the lowest value that satisfies the
condition &nbsp;1.0 + DBL_EPSILON! = 1.0 (for numbers of float type
1.0 + FLT_EPSILON! = 1.0).</span>
</p>

<p class="p_Text"><span class="f_Text">The second way offers
comparing the normalized difference of two real numbers with zero.
It's meaningless to compare the difference of normalized numbers
with a zero, because any mathematical operation with normalized
numbers gives a non-normalized result.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">bool</span><span class=
"f_CodeExample">&nbsp;CompareDoubles(</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;number1,</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;number2)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">NormalizeDouble</span><span class=
"f_CodeExample">(number1-number2,8)==0)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">true</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">else</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">false</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;d_val=0.3;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">float</span><span class=
"f_CodeExample">&nbsp;&nbsp;f_val=0.3;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(CompareDoubles(d_val,f_val))&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(d_val,</span><span class="f_CodeExample" style=
"color: #008080;">"&nbsp;equals&nbsp;"</span><span class=
"f_CodeExample">,f_val);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">else</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Different:&nbsp;d_val&nbsp;=&nbsp;"</span><span class="f_CodeExample">,</span><span class="f_CodeExample"
style="color: #0000ff;">DoubleToString</span><span class=
"f_CodeExample">(d_val,16),</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #008080;">"&nbsp;&nbsp;f_val&nbsp;=&nbsp;"</span><span class="f_CodeExample">,</span><span class="f_CodeExample"
style="color: #0000ff;">DoubleToString</span><span class=
"f_CodeExample">(f_val,16));</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;Result:&nbsp;Different:&nbsp;d_val=&nbsp;0.3000000000000000&nbsp;&nbsp;&nbsp;f_val=&nbsp;0.3000000119209290</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Some operations of the
mathematical co-processor can result in the invalid real number,
which can't be used in mathematical operations and operations of
comparison, because the result of operations with invalid real
numbers is undefined. For example, when trying to calculate the
<a href="matharcsin.htm" class="topiclink">arcsine</a> of 2, the
result is the negative infinity.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;abnormal&nbsp;=&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">MathArcsin</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008000;">2.0</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">("</span><span class="f_CodeExample" style=
"color: #0000ff;">MathArcsin</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008000;">2.0</span><span class=
"f_CodeExample">)&nbsp;=",abnormal);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//&nbsp;Result:&nbsp;&nbsp;MathArcsin(2.0)&nbsp;=&nbsp;-1.#IND</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Besides the minus infinity
there is the plus infinity and NaN (not a number). To determine
that this number is invalid, you can use <a href=
"mathisvalidnumber.htm" class="topiclink">MathIsValidNumber()</a>.
According to the IEEE standard, they have a special machine
representation. For example, plus infinity for the double type has
the bit representation of 0x7FF0 0000 0000 0000.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Examples:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;str1</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;d;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;str2</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">long</span><span class=
"f_CodeExample">&nbsp;l;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;Start&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;str1&nbsp;s1;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;str2&nbsp;s2;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s1.d=</span><span class=
"f_CodeExample" style=
"color: #0000ff;">MathArcsin</span><span class=
"f_CodeExample">(2.0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Get&nbsp;the&nbsp;invalid&nbsp;number&nbsp;-1.#IND</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s2=s1;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"1.&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class=
"f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0xFFFF000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;invalid&nbsp;number&nbsp;-1.#QNAN</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"2.&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class=
"f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x7FF7000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;greatest&nbsp;non-number&nbsp;SNaN</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"3.&nbsp;&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x7FF8000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;smallest&nbsp;non-number&nbsp;QNaN</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"4.&nbsp;&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x7FFF000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;greatest&nbsp;non-number&nbsp;QNaN</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"5.&nbsp;&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x7FF0000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Positive&nbsp;infinity&nbsp;1.#INF&nbsp;and&nbsp;smallest&nbsp;non-number&nbsp;SNaN</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"6.&nbsp;&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0xFFF0000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Negative&nbsp;infinity&nbsp;-1.#INF</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"7.&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class=
"f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x8000000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Negative&nbsp;zero&nbsp;-0.0</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"8.&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class=
"f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x3FE0000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;0.5</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"9.&nbsp;&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x3FF0000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;1.0</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"10.&nbsp;&nbsp;%f&nbsp;%I64X"</span><span class=
"f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x7FEFFFFFFFFFFFFF;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Greatest&nbsp;normalized&nbsp;number&nbsp;(MAX_DBL)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"11.&nbsp;&nbsp;%.16e&nbsp;%I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s2.l=0x0010000000000000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Smallest&nbsp;positive&nbsp;normalized&nbsp;(MIN_DBL)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s1=s2;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"12.&nbsp;&nbsp;%.16e&nbsp;%.16I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;s1.d=0.7;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #808080;">//&nbsp;Show&nbsp;that&nbsp;the&nbsp;number&nbsp;of&nbsp;0.7&nbsp;-&nbsp;endless&nbsp;fraction</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;s2=s1;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">printf</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"13.&nbsp;&nbsp;%.16e&nbsp;%.16I64X"</span><span class="f_CodeExample">,s1.d,s2.l);</span><br>
<span class="f_CodeExample">/*</span><br>
<span class=
"f_CodeExample">1.&nbsp;&nbsp;-1.#IND00&nbsp;FFF8000000000000</span><br>
<span class=
"f_CodeExample">2.&nbsp;&nbsp;-1.#QNAN0&nbsp;FFFF000000000000</span><br>
<span class=
"f_CodeExample">3.&nbsp;&nbsp;&nbsp;1.#SNAN0&nbsp;7FF7000000000000</span><br>
<span class=
"f_CodeExample">4.&nbsp;&nbsp;&nbsp;1.#QNAN0&nbsp;7FF8000000000000</span><br>
<span class=
"f_CodeExample">5.&nbsp;&nbsp;&nbsp;1.#QNAN0&nbsp;7FFF000000000000</span><br>
<span class=
"f_CodeExample">6.&nbsp;&nbsp;&nbsp;1.#INF00&nbsp;7FF0000000000000</span><br>
<span class=
"f_CodeExample">7.&nbsp;&nbsp;-1.#INF00&nbsp;FFF0000000000000</span><br>
<span class=
"f_CodeExample">8.&nbsp;&nbsp;-0.000000&nbsp;8000000000000000</span><br>
<span class=
"f_CodeExample">9.&nbsp;&nbsp;&nbsp;0.500000&nbsp;3FE0000000000000</span><br>
<span class=
"f_CodeExample">10.&nbsp;&nbsp;1.000000&nbsp;3FF0000000000000</span><br>
<span class=
"f_CodeExample">11.&nbsp;&nbsp;1.7976931348623157e+308&nbsp;7FEFFFFFFFFFFFFF</span><br>
<span class=
"f_CodeExample">12.&nbsp;&nbsp;2.2250738585072014e-308&nbsp;0010000000000000</span><br>
<span class=
"f_CodeExample">13.&nbsp;&nbsp;6.9999999999999996e-001&nbsp;3FE6666666666666&nbsp;</span><br>
<span class="f_CodeExample">*/</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href=
"doubletostring.htm" class="topiclink">DoubleToString</a>, <a href=
"normalizedouble.htm" class="topiclink">NormalizeDouble</a>,
<a href="typeconstants.htm" class="topiclink">Constants of Numeric
Types</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
