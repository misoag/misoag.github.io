<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Operation Overloading</title>
<meta name="keywords" content="operator">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "operationoverload.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=operationoverload.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=operationoverload.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="function.htm">Functions</a> / Operation
Overloading</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="functionoverload.htm"><img style="vertical-align:middle;"
src="previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="extfunctions.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Operation Overloading</span>
</p>

<p class="p_Text"><span class="f_Text">For ease of code reading and
writing, overloading of some operations is allowed. Overloading
operator is written using the keyword</span> <span class="f_Text"
style="color: #0000ff;">operator</span><span class="f_Text">. The
following operators can be overloaded:</span></p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li">binary
+,-,/,*,%,&lt;&lt;,&gt;&gt;,==,!=,&lt;,&gt;,&lt;=,&gt;=,=,+=,-=,/=,*=,%=,&amp;=,|=,^=,&lt;&lt;=,&gt;&gt;=,&amp;&amp;,||,&amp;,|,^</span>
</li>

<li><span class="f_li">unary +,-,++,--,!,~</span>
</li>

<li><span class="f_li">assignment operator =</span>
</li>

<li><span class="f_li">indexing operator []</span>
</li>
</ul>

<p class="p_li"><span class="f_li">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">Operation overloading allows
the use of the operating notation (written in the form of simple
expressions) for complex objects - structures and classes. Writing
expressions using overloaded operations simplifies the view of the
source code, because a more complex implementation is
hidden.</span>
</p>

<p class="p_Text"><span class="f_Text">For example, consider
complex numbers, which consist of real and imaginary parts. They
are widely used in mathematics. The MQL5 language has no data type
to represent complex numbers, but it is possible to create a new
data type in the form of a <a href="classes.htm" class=
"topiclink">structure or class</a>. Declare the complex structure
and define four methods that implement four arithmetic
operations:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;A&nbsp;structure&nbsp;for&nbsp;operations&nbsp;with&nbsp;complex&nbsp;numbers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;complex</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;re;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Real&nbsp;part</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Imaginary&nbsp;part</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Constructors</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex():re(0.0),im(0.0)&nbsp;{&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;r):re(r),im(0.0)&nbsp;{&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;r,</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;i):re(r),im(i)&nbsp;{&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;o):re(o.re),im(o.im)&nbsp;{&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Arithmetic&nbsp;operations</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Addition</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sub(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Subtraction</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mul(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Multiplication</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Div(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Division</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Now, in our code we can
declare variables representing complex numbers, and work with
them.</span>
</p>

<p class="p_Text"><span class="f_Text">For example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Declare&nbsp;and&nbsp;initialize&nbsp;variables&nbsp;of&nbsp;a&nbsp;complex&nbsp;type</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;a(2,4),b(-4,-2);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a=%.2f+i*%.2f,&nbsp;&nbsp;&nbsp;b=%.2f+i*%.2f"</span><span class="f_CodeExample">,a.re,a.im,b.re,b.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Sum&nbsp;up&nbsp;two&nbsp;numbers</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;z;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;z=a.Add(a,b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a+b=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,z.re,z.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Multiply&nbsp;two&nbsp;numbers</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;z=a.Mul(a,b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a*b=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,z.re,z.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Divide&nbsp;two&nbsp;numbers</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;z=a.Div(a,b);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a/b=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,z.re,z.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">But it would be more
convenient to use usual operators "+", "-", "*" and "/" for
ordinary arithmetic operations with complex numbers.</span>
</p>

<p class="p_Text"><span class="f_Text">Keyword operator is used for
defining a member function that performs type conversion. Unary and
binary operations for class object variables can be overloaded as
non-static member functions. They implicitly act on the class
object.</span>
</p>

<p class="p_Text"><a class="help" name="binary" id=
"binary"></a><span class="f_Text">Most binary operations can be
overloaded like regular functions that take one or both arguments
as a class variable or a pointer to an object of this class. For
our type complex, overloading in the declaration will look like
this:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Operators</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">+(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Add(this,r));&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">-(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Sub(this,r));&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">*(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Mul(this,r));&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">/(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Div(this,r));&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">The full example of the
script:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Declare&nbsp;and&nbsp;initialize&nbsp;variables&nbsp;of&nbsp;type&nbsp;complex</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;a(2,4),b(-4,-2);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a=%.2f+i*%.2f,&nbsp;&nbsp;&nbsp;b=%.2f+i*%.2f"</span><span class="f_CodeExample">,a.re,a.im,b.re,b.im);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #999999;">//a.re=5;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #999999;">//a.im=1;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #999999;">//b.re=-1;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #999999;">//b.im=-5;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Sum&nbsp;up&nbsp;two&nbsp;numbers</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;z=a+b;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a+b=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,z.re,z.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Multiply&nbsp;two&nbsp;numbers</span><br>

<span class="f_CodeExample" style=
"color: #999999;">&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;z=a*b;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a*b=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,z.re,z.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Divide&nbsp;two&nbsp;numbers</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;z=a/b;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a/b=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,z.re,z.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;A&nbsp;structure&nbsp;for&nbsp;operations&nbsp;with&nbsp;complex&nbsp;numbers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;complex</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;re;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Real&nbsp;part</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Imaginary&nbsp;part</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Constructors</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex():re(0.0),im(0.0)&nbsp;{&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;r):re(r),im(0.0)&nbsp;{&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;r,</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;i):re(r),im(i)&nbsp;{&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;complex(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;o):re(o.re),im(o.im)&nbsp;{&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Arithmetic&nbsp;operations</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Addition</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sub(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Subtraction</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mul(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Multiplication</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Div(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Division</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Binary&nbsp;operators</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">+(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Add(this,r));&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">-(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Sub(this,r));&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">*(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Mul(this,r));&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">/(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Div(this,r));&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Addition&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">complex&nbsp;complex::Add(</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;res;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.re=l.re+r.re;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.im=l.im+r.im;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;res;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Subtraction&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">complex&nbsp;complex::Sub(</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;res;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.re=l.re-r.re;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.im=l.im-r.im;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;res;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Multiplication&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">complex&nbsp;complex::Mul(</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;res;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.re=l.re*r.re-l.im*r.im;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.im=l.re*r.im+l.im*r.re;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;res;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Division&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">complex&nbsp;complex::Div(</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;l,</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;complex&nbsp;&amp;r)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Empty&nbsp;complex&nbsp;number</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;res(</span><span class="f_CodeExample"
style="color: #0000ff;">EMPTY_VALUE</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #0000ff;">EMPTY_VALUE</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Check&nbsp;for&nbsp;zero</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(r.re==0&nbsp;&amp;&amp;&nbsp;r.im==0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">__FUNCTION__</span><span class=
"f_CodeExample">+</span><span class="f_CodeExample" style=
"color: #008080;">":&nbsp;number&nbsp;is&nbsp;zero"</span><span class="f_CodeExample">);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Auxiliary&nbsp;variables</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;e;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;f;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Selecting&nbsp;calculation&nbsp;variant</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">MathAbs</span><span class=
"f_CodeExample">(r.im)&lt;</span><span class="f_CodeExample" style=
"color: #0000ff;">MathAbs</span><span class=
"f_CodeExample">(r.re))</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;=&nbsp;r.im/r.re;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;r.re+r.im*e;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.re=(l.re+l.im*e)/f;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.im=(l.im-l.re*e)/f;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">else</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e&nbsp;=&nbsp;r.re/r.im;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;=&nbsp;r.im+r.re*e;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.re=(l.im+l.re*e)/f;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.im=(-l.re+l.im*e)/f;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;res;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_li"><span class="f_li">&nbsp;</span>
</p>

<p class="p_Text"><a class="help" name="unary" id=
"unary"></a><span class="f_Text">Most unary operations for classes
can be overloaded as ordinary functions that accept a single class
object argument or a pointer to it. Add overloading of unary
operations "-" and "!".</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;A&nbsp;structure&nbsp;for&nbsp;operations&nbsp;with&nbsp;complex&nbsp;numbers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;complex</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;re;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Real&nbsp;part</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;im;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #999999;">//&nbsp;Imaginary&nbsp;part</span><br>
<span class="f_CodeExample">...</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Unary&nbsp;operators&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">-()&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;</span><span class="f_CodeExample" style=
"color: #999999;">//&nbsp;Unary&nbsp;minus</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">bool</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">!()&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">;&nbsp;</span><span class="f_CodeExample" style=
"color: #999999;">//&nbsp;Negation</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample">...</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Overloading&nbsp;the&nbsp;"unary&nbsp;minus"&nbsp;operator&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">complex&nbsp;complex::</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">-()&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;res;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.re=-re;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;res.im=-im;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;res;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Overloading&nbsp;the&nbsp;"logical&nbsp;negation"&nbsp;operator&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">bool</span><span class=
"f_CodeExample">&nbsp;complex::</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">!()&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Are&nbsp;the&nbsp;real&nbsp;and&nbsp;imaginary&nbsp;parts&nbsp;of&nbsp;the&nbsp;complex&nbsp;number&nbsp;equal&nbsp;to&nbsp;zero?</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;(re!=0&nbsp;&amp;&amp;&nbsp;im!=0);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_li"><span class="f_li">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">Now we can check the value
of a complex number for zero and get a negative value:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Declare&nbsp;and&nbsp;initialize&nbsp;variables&nbsp;of&nbsp;type&nbsp;complex</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;a(2,4),b(-4,-2);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a=%.2f+i*%.2f,&nbsp;&nbsp;&nbsp;b=%.2f+i*%.2f"</span><span class="f_CodeExample">,a.re,a.im,b.re,b.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Divide&nbsp;the&nbsp;two&nbsp;numbers</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;z=a/b;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a/b=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,z.re,z.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;A&nbsp;complex&nbsp;number&nbsp;is&nbsp;equal&nbsp;to&nbsp;zero&nbsp;by&nbsp;default&nbsp;(in&nbsp;the&nbsp;default&nbsp;constructor&nbsp;re==0&nbsp;and&nbsp;im==0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;complex&nbsp;zero;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"!zero="</span><span class=
"f_CodeExample">,!zero);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Assign&nbsp;a&nbsp;negative&nbsp;value</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;zero=-z;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"z=%.2f+i*%.2f,&nbsp;&nbsp;zero=%.2f+i*%.2f"</span><span class="f_CodeExample">,z.re,z.im,&nbsp;zero.re,zero.im);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">PrintFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"-zero=%.2f+i*%.2f"</span><span class=
"f_CodeExample">,-zero.re,-zero.im);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Check&nbsp;for&nbsp;zero&nbsp;once&nbsp;again&nbsp;&nbsp;&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"!zero="</span><span class=
"f_CodeExample">,!zero);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Note that we did not have to
overload the assignment operator "=", as <a href=
"classes.htm#simple_structure" class="topiclink">structures of
simple types</a> can be directly copied one into each other. Thus,
we can now write a code for calculations involving complex numbers
in the usual manner.</span>
</p>

<p class="p_Text"><a class="help" name="indexing" id=
"indexing"></a><span class="f_Text">Overloading of the indexing
operator allows to obtain the values of the arrays enclosed in an
object, in a simple and familiar way, and it also contributes to a
better readability of the source code. For example, we need to
provide access to a symbol in the string at the specified position.
A string in MQL5 is a separate type <a href="stringconst.htm"
class="topiclink">string</a>, which is not an array of symbols, but
with the help of an overloaded indexing operation we can provide a
simple and transparent work in the generated CString class:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Class&nbsp;to&nbsp;access&nbsp;symbols&nbsp;in&nbsp;string&nbsp;as&nbsp;in&nbsp;array&nbsp;of&nbsp;symbols&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CString</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_string;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CString(</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;str=</span><span class="f_CodeExample" style=
"color: #ff00ff;">NULL</span><span class=
"f_CodeExample">):m_string(str)&nbsp;{&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">ushort</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">operator</span><span class=
"f_CodeExample">[]&nbsp;(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;x)&nbsp;{&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">StringGetCharacter</span><span class=
"f_CodeExample">(m_string,x));&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()&nbsp;&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;An&nbsp;array&nbsp;for&nbsp;receiving&nbsp;symbols&nbsp;from&nbsp;a&nbsp;string</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[]={&nbsp;19,4,18,19,27,14,15,4,17,0,19,14,17,27,26,28,27,5,14,</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17,27,2,11,0,18,18,27,29,30,19,17,8,13,6&nbsp;};</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CString&nbsp;str(</span><span class="f_CodeExample"
style=
"color: #008080;">"abcdefghijklmnopqrstuvwxyz[&nbsp;]CS"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;res;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Make&nbsp;up&nbsp;a&nbsp;phrase&nbsp;using&nbsp;symbols&nbsp;from&nbsp;the&nbsp;str&nbsp;variable</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0,n=ArraySize(x);i&lt;n;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res+=</span><span class="f_CodeExample"
style="color: #0000ff;">ShortToString</span><span class=
"f_CodeExample">(str[x[i]]);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Show&nbsp;the&nbsp;result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(res);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">Another example of
overloading of the indexing operation is operations with matrices.
The matrix represents a two-dimensional dynamic array, the array
size is not defined in advance. Therefore, you cannot declare an
array of form array[][] without specifying the size of the second
dimension, and then pass this array as a parameter. A possible
solution is a special class CMatrix, which contains an array of
CRow class objects.</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Script&nbsp;program&nbsp;start&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Operations&nbsp;of&nbsp;addition&nbsp;and&nbsp;multiplication&nbsp;of&nbsp;matrices</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CMatrix&nbsp;A(3),B(3),C();</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Prepare&nbsp;an&nbsp;array&nbsp;for&nbsp;rows</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;a1[3]={1,2,3},&nbsp;a2[3]={2,3,1},&nbsp;a3[3]={3,1,2};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;b1[3]={3,2,1},&nbsp;b2[3]={1,3,2},&nbsp;b3[3]={2,1,3};</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Fill&nbsp;the&nbsp;matrices</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;A[0]=a1;&nbsp;A[1]=a2;&nbsp;A[2]=a3;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;B[0]=b1;&nbsp;B[1]=b2;&nbsp;B[2]=b3;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Output&nbsp;the&nbsp;matrices&nbsp;in&nbsp;the&nbsp;Experts&nbsp;log</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"----&nbsp;Elements&nbsp;of&nbsp;matrix&nbsp;A"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(A.</span><span class="f_CodeExample" style=
"color: #0000ff;">String</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"----&nbsp;Elements&nbsp;of&nbsp;matrix&nbsp;B"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(B.</span><span class="f_CodeExample" style=
"color: #0000ff;">String</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Addition&nbsp;of&nbsp;matrices</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"----&nbsp;Addition&nbsp;of&nbsp;matrices&nbsp;A&nbsp;and&nbsp;B"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;C=A+B;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Output&nbsp;the&nbsp;formatted&nbsp;string&nbsp;representation</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(C.</span><span class="f_CodeExample" style=
"color: #0000ff;">String</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Multiplication&nbsp;of&nbsp;matrices</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"----&nbsp;Multiplication&nbsp;of&nbsp;matrices&nbsp;A&nbsp;and&nbsp;B"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;C=A*B;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(C.</span><span class="f_CodeExample" style=
"color: #0000ff;">String</span><span class=
"f_CodeExample">());</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Now&nbsp;we&nbsp;show&nbsp;how&nbsp;to&nbsp;get&nbsp;values&nbsp;in&nbsp;the&nbsp;style&nbsp;of&nbsp;dynamic&nbsp;arrays&nbsp;matrix[i][j]</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Output&nbsp;the&nbsp;values&nbsp;of&nbsp;matrix&nbsp;C&nbsp;elementwise"</span><span class="f_CodeExample">);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Go&nbsp;through&nbsp;the&nbsp;matrix&nbsp;rows&nbsp;-&nbsp;CRow&nbsp;objects&nbsp;-&nbsp;in&nbsp;a&nbsp;loop</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;3;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;com=</span><span class="f_CodeExample" style=
"color: #008080;">"|&nbsp;"</span><span class=
"f_CodeExample">;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Form&nbsp;rows&nbsp;from&nbsp;the&nbsp;matrix&nbsp;for&nbsp;the&nbsp;value</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;j=0;j&lt;3;j++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Get&nbsp;the&nbsp;matrix&nbsp;element&nbsp;by&nbsp;the&nbsp;number&nbsp;of&nbsp;the&nbsp;row&nbsp;and&nbsp;column</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;element=C[i][j];</span><span class=
"f_CodeExample" style=
"color: #999999;">//&nbsp;[i]&nbsp;-&nbsp;Access&nbsp;to&nbsp;CRow&nbsp;in&nbsp;the&nbsp;array&nbsp;m_rows[]&nbsp;,</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//&nbsp;[j]&nbsp;-&nbsp;Overloaded&nbsp;operator&nbsp;of&nbsp;indexing&nbsp;in&nbsp;CRow</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com=com+</span><span class="f_CodeExample"
style="color: #0000ff;">StringFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"a(%d,%d)=%G&nbsp;;&nbsp;"</span><span class=
"f_CodeExample">,i,j,element);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com+=</span><span class="f_CodeExample"
style="color: #008080;">"|"</span><span class=
"f_CodeExample">;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Output&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;row</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(com);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Class&nbsp;"Row"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CRow</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_array[];</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Constructors&nbsp;and&nbsp;a&nbsp;destructor</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CRow(</span><span class="f_CodeExample"
style="color: #0000ff;">void</span><span class=
"f_CodeExample">)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_array,0);&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CRow(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CRow&nbsp;&amp;r)&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">this</span><span class=
"f_CodeExample">=r;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CRow(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&amp;array[]);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~CRow(</span><span class="f_CodeExample"
style="color: #0000ff;">void</span><span class=
"f_CodeExample">){};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Number&nbsp;of&nbsp;elements&nbsp;in&nbsp;the&nbsp;row</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Size(</span><span class="f_CodeExample"
style="color: #0000ff;">void</span><span class=
"f_CodeExample">)&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(m_array));}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Returns&nbsp;a&nbsp;string&nbsp;with&nbsp;values&nbsp;&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">String</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">)&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Indexing&nbsp;operator</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">[](</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i)&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;&nbsp;{&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(m_array[i]);&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Assignment&nbsp;operators</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">=(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&amp;array[]);&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//&nbsp;An&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">=(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CRow&nbsp;&amp;&nbsp;r);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//&nbsp;Another&nbsp;CRow&nbsp;object</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">*(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CRow&nbsp;&amp;o);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//&nbsp;CRow&nbsp;object&nbsp;for&nbsp;multiplication</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Constructor&nbsp;for&nbsp;initializing&nbsp;a&nbsp;row&nbsp;with&nbsp;an&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;CRow::CRow(</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&amp;array[])</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;size=</span><span class="f_CodeExample"
style="color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(array);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;If&nbsp;the&nbsp;array&nbsp;is&nbsp;not&nbsp;empty</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(size&gt;0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_array,size);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Fill&nbsp;with&nbsp;values</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;size;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_array[i]=array[i];</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Assignment&nbsp;operation&nbsp;for&nbsp;the&nbsp;array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;CRow::</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">=(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;&amp;array[])</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;size=</span><span class="f_CodeExample"
style="color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(array);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(size==0)&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Fill&nbsp;the&nbsp;array&nbsp;with&nbsp;values</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_array,size);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;size;i++)&nbsp;m_array[i]=array[i];</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Assignment&nbsp;operation&nbsp;for&nbsp;CRow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;CRow::</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">=(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CRow&nbsp;&nbsp;&amp;r)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;size=r.Size();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(size==0)&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Fill&nbsp;the&nbsp;array&nbsp;with&nbsp;values</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_array,size);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;size;i++)&nbsp;m_array[i]=r[i];</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Operator&nbsp;of&nbsp;multiplication&nbsp;by&nbsp;another&nbsp;row&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;CRow::</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">*(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CRow&nbsp;&amp;o)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;res=0;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Verifications</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;size=Size();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(size!=o.Size()&nbsp;||&nbsp;size==0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">__FUNCSIG__</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #008080;">":&nbsp;Failed&nbsp;to&nbsp;multiply&nbsp;two&nbsp;matrices,&nbsp;their&nbsp;sizes&nbsp;are&nbsp;different"</span><span class="f_CodeExample">);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Multiply&nbsp;arrays&nbsp;elementwise&nbsp;and&nbsp;add&nbsp;the&nbsp;products</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;size;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res+=m_array[i]*o[i];</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Returns&nbsp;a&nbsp;formatted&nbsp;string&nbsp;representation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;CRow::</span><span class="f_CodeExample"
style="color: #0000ff;">String</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">)&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;out=</span><span class="f_CodeExample" style=
"color: #008080;">""</span><span class="f_CodeExample">;</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;If&nbsp;the&nbsp;size&nbsp;of&nbsp;the&nbsp;array&nbsp;is&nbsp;greater&nbsp;than&nbsp;zero</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;size=</span><span class="f_CodeExample"
style="color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(m_array);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;We&nbsp;work&nbsp;only&nbsp;with&nbsp;a&nbsp;non-zero&nbsp;number&nbsp;of&nbsp;array&nbsp;elements</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(size&gt;0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out=</span><span class="f_CodeExample"
style="color: #008080;">"{"</span><span class=
"f_CodeExample">;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;size;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Collect&nbsp;the&nbsp;values&nbsp;to&nbsp;a&nbsp;string</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out+=</span><span class="f_CodeExample"
style="color: #0000ff;">StringFormat</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"&nbsp;%G;"</span><span class=
"f_CodeExample">,m_array[i]);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out+=</span><span class="f_CodeExample"
style="color: #008080;">"&nbsp;}"</span><span class=
"f_CodeExample">;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(out);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Class&nbsp;"Matrix"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CMatrix</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CRow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_rows[];</span><br>

<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Constructors&nbsp;and&nbsp;a&nbsp;destructor</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CMatrix(</span><span class="f_CodeExample"
style="color: #0000ff;">void</span><span class=
"f_CodeExample">);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CMatrix(</span><span class="f_CodeExample"
style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rows)&nbsp;&nbsp;{&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_rows,rows);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~CMatrix(</span><span class="f_CodeExample"
style="color: #0000ff;">void</span><span class=
"f_CodeExample">){};</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Get&nbsp;the&nbsp;matrix&nbsp;sizes</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rows()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(m_rows));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cols()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(Rows()&gt;0?&nbsp;m_rows[0].Size():0);&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Returns&nbsp;the&nbsp;value&nbsp;of&nbsp;the&nbsp;column&nbsp;in&nbsp;the&nbsp;form&nbsp;of&nbsp;a&nbsp;CRow&nbsp;row</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CRow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetColumnAsRow(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;col_index)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Returns&nbsp;a&nbsp;string&nbsp;with&nbsp;the&nbsp;matrix&nbsp;values&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">String</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">)&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;The&nbsp;indexing&nbsp;operator&nbsp;returns&nbsp;a&nbsp;string&nbsp;by&nbsp;its&nbsp;number</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CRow&nbsp;*</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">[](</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i)&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">GetPointer</span><span class=
"f_CodeExample">(m_rows[i]));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Addition&nbsp;operator</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CMatrix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">+(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CMatrix&nbsp;&amp;m);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Multiplication&nbsp;operator</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CMatrix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">*(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CMatrix&nbsp;&amp;m);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #999999;">//---&nbsp;Assignment&nbsp;operator</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CMatrix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span><span class="f_CodeExample"
style="color: #0000ff;">operator</span><span class=
"f_CodeExample">=(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CMatrix&nbsp;&amp;m);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;A&nbsp;default&nbsp;constructor,&nbsp;create&nbsp;an&nbsp;array&nbsp;of&nbsp;rows&nbsp;of&nbsp;zero&nbsp;size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample">CMatrix::CMatrix(</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;The&nbsp;zero&nbsp;number&nbsp;of&nbsp;rows&nbsp;in&nbsp;the&nbsp;matrix</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_rows,0);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Returns&nbsp;the&nbsp;column&nbsp;value&nbsp;in&nbsp;the&nbsp;form&nbsp;of&nbsp;CRow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">CRow&nbsp;&nbsp;CMatrix::GetColumnAsRow(</span><span class="f_CodeExample"
style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;col_index)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;A&nbsp;variable&nbsp;to&nbsp;get&nbsp;the&nbsp;values&nbsp;from&nbsp;the&nbsp;column</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CRow&nbsp;row();</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;The&nbsp;number&nbsp;of&nbsp;rows&nbsp;in&nbsp;the&nbsp;matrix</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rows=Rows();</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;If&nbsp;the&nbsp;number&nbsp;of&nbsp;rows&nbsp;is&nbsp;greater&nbsp;than&nbsp;zero,&nbsp;execute&nbsp;the&nbsp;operation</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(rows&gt;0)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;An&nbsp;array&nbsp;to&nbsp;receive&nbsp;the&nbsp;values&nbsp;of&nbsp;the&nbsp;column&nbsp;with&nbsp;index&nbsp;col_index</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;array[];</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(array,rows);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Filling&nbsp;the&nbsp;array</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;rows;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Check&nbsp;the&nbsp;number&nbsp;of&nbsp;the&nbsp;column&nbsp;for&nbsp;row&nbsp;i&nbsp;-&nbsp;it&nbsp;may&nbsp;exceed&nbsp;the&nbsp;boundaries&nbsp;of&nbsp;the&nbsp;array</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">if</span><span class=
"f_CodeExample">(col_index&gt;=</span><span class="f_CodeExample"
style="color: #0000ff;">this</span><span class=
"f_CodeExample">[i].Size())</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">__FUNCSIG__</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #008080;">":&nbsp;Error!&nbsp;Column&nbsp;number&nbsp;"</span><span class="f_CodeExample">,col_index,</span><span class="f_CodeExample"
style=
"color: #008080;">"&gt;&nbsp;row&nbsp;size&nbsp;"</span><span class="f_CodeExample">,i);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">break</span><span class=
"f_CodeExample">;&nbsp;</span><span class="f_CodeExample" style=
"color: #999999;">//&nbsp;row&nbsp;will&nbsp;be&nbsp;uninitialized&nbsp;object</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array[i]=</span><span class="f_CodeExample"
style="color: #0000ff;">this</span><span class=
"f_CodeExample">[i][col_index];</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Create&nbsp;a&nbsp;CRow&nbsp;row&nbsp;based&nbsp;on&nbsp;the&nbsp;array&nbsp;values</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row=array;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(row);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Addition&nbsp;of&nbsp;two&nbsp;matrices&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">CMatrix&nbsp;CMatrix::</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">+(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CMatrix&nbsp;&amp;m)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;The&nbsp;number&nbsp;of&nbsp;rows&nbsp;and&nbsp;columns&nbsp;in&nbsp;the&nbsp;passed&nbsp;matrix</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;cols=m.Cols();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rows=m.Rows();</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;The&nbsp;matrix&nbsp;to&nbsp;receive&nbsp;the&nbsp;addition&nbsp;results&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CMatrix&nbsp;res(rows);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;The&nbsp;sizes&nbsp;of&nbsp;the&nbsp;matrix&nbsp;must&nbsp;match</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(cols!=Cols()&nbsp;||&nbsp;rows!=Rows())</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Addition&nbsp;impossible</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">__FUNCSIG__</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #008080;">":&nbsp;Failed&nbsp;to&nbsp;add&nbsp;two&nbsp;matrices,&nbsp;their&nbsp;sizes&nbsp;are&nbsp;different"</span><span class="f_CodeExample">);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Auxiliary&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;arr[];</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(arr,cols);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Go&nbsp;through&nbsp;rows&nbsp;to&nbsp;add</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;rows;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Write&nbsp;the&nbsp;results&nbsp;of&nbsp;addition&nbsp;of&nbsp;matrix&nbsp;strings&nbsp;in&nbsp;the&nbsp;array</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;k=0;k&lt;cols;k++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[k]=</span><span class="f_CodeExample"
style="color: #0000ff;">this</span><span class=
"f_CodeExample">[i][k]+m[i][k];</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Place&nbsp;the&nbsp;array&nbsp;to&nbsp;the&nbsp;matrix&nbsp;row</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res[i]=arr;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;return&nbsp;the&nbsp;result&nbsp;of&nbsp;addition&nbsp;of&nbsp;matrices</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Multiplication&nbsp;of&nbsp;two&nbsp;matrices&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">CMatrix&nbsp;CMatrix::</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">*(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CMatrix&nbsp;&amp;m)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Number&nbsp;of&nbsp;columns&nbsp;of&nbsp;the&nbsp;first&nbsp;matrix,&nbsp;number&nbsp;of&nbsp;rows&nbsp;passed&nbsp;in&nbsp;the&nbsp;matrix</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;cols1=Cols();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rows2=m.Rows();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rows1=Rows();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;cols2=m.Cols();</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Matrix&nbsp;to&nbsp;receive&nbsp;the&nbsp;addition&nbsp;result</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CMatrix&nbsp;res(rows1);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Matrices&nbsp;should&nbsp;be&nbsp;coordinated</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(cols1!=rows2)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Multiplication&nbsp;impossible</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">__FUNCSIG__</span><span class=
"f_CodeExample">,</span><span class="f_CodeExample" style=
"color: #008080;">":&nbsp;Failed&nbsp;to&nbsp;multiply&nbsp;two&nbsp;matrices,&nbsp;format&nbsp;is&nbsp;not&nbsp;compatible&nbsp;"</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #008080;">"-&nbsp;number&nbsp;of&nbsp;columns&nbsp;in&nbsp;the&nbsp;first&nbsp;factor&nbsp;should&nbsp;be&nbsp;equal&nbsp;to&nbsp;the&nbsp;number&nbsp;of&nbsp;rows&nbsp;in&nbsp;the&nbsp;second"</span><span class="f_CodeExample">);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Auxiliary&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;arr[];</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(arr,cols1);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Fill&nbsp;the&nbsp;rows&nbsp;in&nbsp;the&nbsp;multiplication&nbsp;matrix</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;rows1;i++)</span><span class=
"f_CodeExample" style=
"color: #999999;">//&nbsp;Go&nbsp;through&nbsp;rows</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Reset&nbsp;the&nbsp;receiving&nbsp;array</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">ArrayInitialize</span><span class=
"f_CodeExample">(arr,0);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Go&nbsp;through&nbsp;elements&nbsp;in&nbsp;the&nbsp;row</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;k=0;k&lt;cols1;k++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Take&nbsp;values&nbsp;of&nbsp;column&nbsp;k&nbsp;of&nbsp;the&nbsp;matrix&nbsp;m&nbsp;in&nbsp;the&nbsp;for&nbsp;of&nbsp;CRow</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CRow&nbsp;column=m.GetColumnAsRow(k);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;Multiply&nbsp;two&nbsp;rows&nbsp;and&nbsp;write&nbsp;the&nbsp;result&nbsp;of&nbsp;scalar&nbsp;multiplication&nbsp;of&nbsp;vectors&nbsp;in&nbsp;the&nbsp;i-th&nbsp;element</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[k]=</span><span class="f_CodeExample"
style="color: #0000ff;">this</span><span class=
"f_CodeExample">[i]*column;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style=
"color: #999999;">//---&nbsp;place&nbsp;array&nbsp;arr[]&nbsp;in&nbsp;the&nbsp;i-th&nbsp;row&nbsp;of&nbsp;the&nbsp;matrix</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res[i]=arr;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Return&nbsp;the&nbsp;product&nbsp;of&nbsp;two&nbsp;matrices</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(res);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;Assignment&nbsp;operation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class=
"f_CodeExample">CMatrix&nbsp;*CMatrix::</span><span class=
"f_CodeExample" style="color: #0000ff;">operator</span><span class=
"f_CodeExample">=(</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;CMatrix&nbsp;&amp;m)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Find&nbsp;and&nbsp;set&nbsp;the&nbsp;number&nbsp;of&nbsp;rows</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rows=m.Rows();</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(m_rows,rows);</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Fill&nbsp;our&nbsp;rows&nbsp;with&nbsp;the&nbsp;values&nbsp;of&nbsp;rows&nbsp;of&nbsp;&nbsp;the&nbsp;passed&nbsp;matrix</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;rows;i++)&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">this</span><span class=
"f_CodeExample">[i]=m[i];</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">GetPointer</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">this</span><span class=
"f_CodeExample">));</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//|&nbsp;String&nbsp;representation&nbsp;of&nbsp;the&nbsp;matrix&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;CMatrix::</span><span class="f_CodeExample"
style="color: #0000ff;">String</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">)&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">const</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;out=</span><span class="f_CodeExample" style=
"color: #008080;">""</span><span class="f_CodeExample">;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;rows=Rows();</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Form&nbsp;string&nbsp;by&nbsp;string</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;rows;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out=out+</span><span class="f_CodeExample"
style="color: #0000ff;">this</span><span class=
"f_CodeExample">[i].</span><span class="f_CodeExample" style=
"color: #0000ff;">String</span><span class=
"f_CodeExample">()+</span><span class="f_CodeExample" style=
"color: #008080;">"\r\n"</span><span class=
"f_CodeExample">;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #999999;">//---&nbsp;Result</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(out);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="overload.htm"
class="topiclink">Overloading</a>, <a href="mathoperation.htm"
class="topiclink">Arithmetic Operations</a>, <a href=
"functionoverload.htm" class="topiclink">Function Overloading</a>,
<a href="rules.htm" class="topiclink">Precedence Rules</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
