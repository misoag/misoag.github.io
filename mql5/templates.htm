<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Function templates</title>
<meta name="keywords" content="template,typename">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "templates.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=templates.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=templates.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="oop.htm">Object-Oriented Programming</a> / Function
templates</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="staticmembers.htm"><img style="vertical-align:middle;"
src="previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="constants.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Function templates</span>
</p>

<p class="p_Text"><span class="f_Text"><a href=
"functionoverload.htm" class="topiclink">Overloaded functions</a>
are commonly used to perform similar operations on various data
types. <a href="arraysize.htm" class="topiclink">ArraySize()</a> is
a simple example of such function in MQL5. It returns size of any
type of array. In fact, this system function is overloaded and the
entire implementation of such an overload is hidden from MQL5
application developers:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_Keywords">int&nbsp;&nbsp;</span><span class=
"f_Functions">ArraySize</span><span class=
"f_CodeExample">(</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_Keywords">void&amp;</span><span class=
"f_CodeExample">&nbsp;&nbsp;</span><span class=
"f_Param">array[]</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;checked&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">It means that MQL5 language
compiler inserts necessary implementation for each call of this
function. For example, that is how it can be done for integer type
arrays:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_Keywords">int&nbsp;&nbsp;</span><span class=
"f_Functions">ArraySize</span><span class=
"f_CodeExample">(</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_Keywords">int&amp;</span><span class=
"f_CodeExample">&nbsp;&nbsp;</span><span class=
"f_Param">array[]</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_Comments">//&nbsp;array&nbsp;with&nbsp;int&nbsp;type&nbsp;elements</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text"><a href="arraysize.htm"
class="topiclink">ArraySize()</a> function can be displayed the
following way for <a href="mqlrates.htm" class=
"topiclink">MqlRates</a> type array for working with quotations in
historical data format:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class=
"f_Keywords">int&nbsp;&nbsp;</span><span class=
"f_Functions">ArraySize</span><span class=
"f_CodeExample">(</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_Keywords">MqlRates&amp;</span><span class=
"f_CodeExample">&nbsp;&nbsp;</span><span class=
"f_Param">array[]</span><span class=
"f_CodeExample">&nbsp;</span><span class=
"f_Comments">//&nbsp;array&nbsp;filled&nbsp;with&nbsp;MqlRates&nbsp;type&nbsp;values</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Thus, it is very convenient
to use the same function for working with different types. However,
all preliminary work should be carried out Â– the necessary function
should be <a href="functionoverload.htm" class=
"topiclink">overloaded</a> for all data types it should correctly
work with.</span>
</p>

<p class="p_Text"><span class="f_Text">There is a convenient
solution. If similar operations should be executed for each data
type, it is possible to use function templates. In this case, a
programmer needs to write only one function template description.
When describing the template in such a way, we should specify only
some formal parameter instead of some definite data type the
function should work with. The compiler will automatically generate
various functions for the appropriate handling of each type based
on the types of the arguments used when calling the
function.</span>
</p>

<p class="p_Text"><span class="f_Text">Function template definition
starts with the</span> <span class="f_Text" style=
"color: #0000ff;">template</span> <span class="f_Text">keyword
followed by the list of formal parameters in angle brackets. Each
formal parameter is preceded by the</span> <span class="f_Text"
style="color: #0000ff;">typename</span> <span class=
"f_Text">keyword. Formal parameter types are built-in or
user-defined types. They are used:</span></p>

<ul class="help_list" style=
"text-align: justify; text-indent: 0px; padding: 0px 0px 0px 17px; margin: 3px 17px 3px 17px;">
<li><span class="f_li">to specify the types of function
arguments,</span>
</li>

<li><span class="f_li">to specify the types of function's return
value,</span>
</li>

<li><span class="f_li">to declare the variables inside the function
definition</span>
</li>
</ul>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">Number of template
parameters cannot exceed eight. Each formal parameter in the
template definition should appear in the list of function
parameters at least once. Each name of the formal parameter should
be unique.</span>
</p>

<p class="p_Text"><span class="f_Text">Below is an example of a
function template for searching the highest value in the array of
any numeric type (integer and real numbers):</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">template</span><span class=
"f_CodeExample">&lt;</span><span class="f_CodeExample" style=
"color: #0000ff;">typename</span><span class=
"f_CodeExample">&nbsp;T&gt;</span><br>
<span class=
"f_CodeExample">T&nbsp;ArrayMax(T&nbsp;&amp;arr[])</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">uint</span><span class=
"f_CodeExample">&nbsp;size=</span><span class="f_CodeExample"
style="color: #0000ff;">ArraySize</span><span class=
"f_CodeExample">(arr);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(size==0)&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;T&nbsp;max=arr[0];</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">uint</span><span class=
"f_CodeExample">&nbsp;n=1;n&lt;size;n++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">if</span><span class=
"f_CodeExample">(max&lt;arr[n])&nbsp;max=arr[n];</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(max);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">This template defines the
function that finds the highest value in the passed array and
returns this value as a result. Keep in mind that the <a href=
"arraymaximum.htm" class="topiclink">ArrayMaximum()</a> function
built in MQL5 returns only the highest value index that can be used
to find the value itself. For example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;create&nbsp;an&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;array[];</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;size=50;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayResize</span><span class=
"f_CodeExample">(array,size);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;&nbsp;fill&nbsp;with&nbsp;random&nbsp;values</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">for</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i=0;i&lt;size;i++)</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array[i]=</span><span class="f_CodeExample"
style="color: #0000ff;">MathRand</span><span class=
"f_CodeExample">();</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;find&nbsp;position&nbsp;of&nbsp;the&nbsp;highest&nbsp;value&nbsp;in&nbsp;the&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;max_position=</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayMaximum</span><span class=
"f_CodeExample">(array);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;now,&nbsp;get&nbsp;the&nbsp;highest&nbsp;value&nbsp;itself&nbsp;in&nbsp;the&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;max=array[max_position];</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;display&nbsp;the&nbsp;found&nbsp;value</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"Max&nbsp;value&nbsp;=&nbsp;"</span><span class=
"f_CodeExample">,max);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">Thus, we have performed two
steps to get the highest value in the array. With ArrayMax()
function template, we can get the result of the necessary type just
by passing the array of an appropriate type into this function. It
means that instead of two last lines</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;find&nbsp;position&nbsp;of&nbsp;the&nbsp;highest&nbsp;value&nbsp;in&nbsp;the&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;max_position=</span><span class=
"f_CodeExample" style=
"color: #0000ff;">ArrayMaximum</span><span class=
"f_CodeExample">(array);</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;now,&nbsp;get&nbsp;the&nbsp;highest&nbsp;value&nbsp;itself&nbsp;in&nbsp;the&nbsp;array</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;max=array[max_position];</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">we now can use only one
line, in which the returned result has the same type as the array
passed into function:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;find&nbsp;the&nbsp;highest&nbsp;value</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">double</span><span class=
"f_CodeExample">&nbsp;max=ArrayMax(array);</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">In this case, the type of
result returned by the ArrayMax() function will automatically match
the type of array.</span>
</p>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">Use the</span> <span class=
"f_Text" style="color: #0000ff;">typename</span> <span class=
"f_Text">keyword to get the argument type as a string in order to
create general purpose methods of working with various data types.
Let's consider a specific example of the function that returns data
type as a string:</span></p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">#include</span><span class=
"f_CodeExample">&nbsp;&lt;Trade\Trade.mqh&gt;</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;</span><span class="f_CodeExample" style=
"color: #0000ff;">OnStart</span><span class=
"f_CodeExample">()</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;CTrade&nbsp;trade;&nbsp;&nbsp;&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">&nbsp;&nbsp;&nbsp;double</span><span class=
"f_CodeExample">&nbsp;d_value=M_PI;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;i_value=INT_MAX;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"d_value:&nbsp;type="</span><span class=
"f_CodeExample">,GetTypeName(d_value),&nbsp;</span><span class=
"f_CodeExample" style=
"color: #008080;">",&nbsp;&nbsp;&nbsp;value="</span><span class=
"f_CodeExample">,&nbsp;d_value);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"i_value:&nbsp;type="</span><span class=
"f_CodeExample">,GetTypeName(i_value),&nbsp;</span><span class=
"f_CodeExample" style=
"color: #008080;">",&nbsp;&nbsp;&nbsp;value="</span><span class=
"f_CodeExample">,&nbsp;i_value);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">Print</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #008080;">"trade:&nbsp;type="</span><span class=
"f_CodeExample">,GetTypeName(trade));</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//|&nbsp;Type&nbsp;is&nbsp;returned&nbsp;as&nbsp;a&nbsp;line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//+------------------------------------------------------------------+</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">template</span><span class=
"f_CodeExample">&lt;</span><span class="f_CodeExample" style=
"color: #0000ff;">typename</span><span class=
"f_CodeExample">&nbsp;T&gt;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;GetTypeName(</span><span class=
"f_CodeExample" style="color: #0000ff;">const</span><span class=
"f_CodeExample">&nbsp;T&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">&amp;</span><span class=
"f_CodeExample">t)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---&nbsp;return&nbsp;the&nbsp;type&nbsp;as&nbsp;a&nbsp;line</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">typename</span><span class=
"f_CodeExample">(T));</span><br>
<span class="f_CodeExample" style=
"color: #808080;">//---</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">Function templates can also
be used for class methods, for example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CFile</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;...</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;...</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">template</span><span class=
"f_CodeExample">&lt;</span><span class="f_CodeExample" style=
"color: #0000ff;">typename</span><span class=
"f_CodeExample">&nbsp;T&gt;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">uint</span><span class=
"f_CodeExample">&nbsp;WriteStruct(T&nbsp;&amp;data);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">template</span><span class=
"f_CodeExample">&lt;</span><span class="f_CodeExample" style=
"color: #0000ff;">typename</span><span class=
"f_CodeExample">&nbsp;T&gt;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">uint</span><span class=
"f_CodeExample">&nbsp;CFile::WriteStruct(T&nbsp;&amp;data)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;...</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(</span><span class="f_CodeExample" style=
"color: #0000ff;">FileWriteStruct</span><span class=
"f_CodeExample">(m_handle,data));</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">Function templates should
not be declared with <a href="export.htm" class=
"topiclink">export</a>, <a href="virtual.htm" class=
"topiclink">virtual</a> and <a href="extfunctions.htm" class=
"topiclink">#import</a> keywords.</span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
