<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="keywords" content="online documentation, web online help, web help, chm2web" />
<meta http-equiv="Content-Style-Type" content="text/css" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<meta name="generator" content="chm2web Pro 2.85 (unicode)" />
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Style-Type" content="text/css">

<title>Encapsulation and Extensibility of Types</title>
<meta name="keywords" content="">
<link rel="stylesheet" href="files/helpindex.css" type="text/css">
<link rel="stylesheet" href="default.css" type="text/css">

<script type="text/JavaScript" src="files/supply.js"></script>
<script type="text/JavaScript">
chmtop.c2wtopf.pageid = "incapsulation.htm";
</script>

</head>
<body style=
"background-color:#FFFFFF; font-family:'Trebuchet MS',Tahoma,Arial,Helvetica,sans-serif; margin:0px;"><script type="text/JavaScript"> 
if (window.name != "content") 
  document.write(" <table width=\"100%\" bgcolor=\"#e1e1e1\"cellspacing=\"2\" cellpadding=\"0\" style=\"border-collapse: collapse; font-family: sans-serif; font-size: 14px; color: #000000; text-decoration: none;  \"> <tr> <td align=\"center\" style=\"border-bottom: 2px solid gray\" > <br>&nbsp;Click <a href=\"index.html?page=incapsulation.htm\">here</a> to show toolbars of the Web Online Help System: <a href=\"index.html?page=incapsulation.htm\">show toolbars</a><br>&nbsp;</td></tr></table><br> "); 
</script>
<!-- !chm2web! -->


<table width="100%" border="0" cellpadding="0" cellspacing="0"
style=
"margin:0; background: #7F90A5 url('gradient_header.png') repeat-x left top; border-bottom: 3px solid #DBE0E5;">
<tr>
<td valign="middle">
<table style="margin: 10px 0" width="100%" border="0" cellspacing=
"0" cellpadding="0">
<tr valign="middle">
<td class="nav"><a class="h_m" href="index.htm">MQL5 Reference</a>
/ <a class="h_m" href="basis.htm">Language Basics</a> / <a class=
"h_m" href="oop.htm">Object-Oriented Programming</a> /
Encapsulation and Extensibility of Types</td>
<td align="right" style="white-space: nowrap; padding: 0 10px;">
<a href="oop.htm"><img style="vertical-align:middle;" src=
"previous.png" alt="Back" width="27" height="27" border=
"0"></a><a href="inheritance.htm"><img style=
"vertical-align:middle;margin-left: 7px;" src="next.png" alt=
"Forward" width="27" height="27" border="0"></a>
</td>
</tr>
</table>
</td>
</tr>
</table>

<div id="help">
<p class="p_H1"><span class="f_H1">Encapsulation and Extensibility
of Types</span>
</p>

<p class="p_Text"><span class="f_Text">OOP is a balanced approach
to writing software. Data and behavior are packed together. This
encapsulation creates user-defined data types, extending the
language data types and interacting with them. Types extensibility
is an opportunity to add to the language user-defined data types,
which are also easy to use, as well as <a href=
"types.htm#base_types" class="topiclink">basic types</a>.</span>
</p>

<p class="p_Text"><span class="f_Text">An abstract data type, for
example, a string, is a description of the ideal, well known
behavior type.</span>
</p>

<p class="p_Text"><span class="f_Text">The string user knows that
the string operations, such as concatenation or print, have a
certain behavior. Concatenation and print operations are called
methods.</span>
</p>

<p class="p_Text"><span class="f_Text">A certain implementation of
ADT may have some restrictions, for example, strings can be limited
in length. These limitations affect the behavior opened to all. At
the same time, internal or private implementation details do not
affect directly the way the user sees the object. For example, the
string is often implemented as an array, while the internal base
address of this array and its name are not essential for the
user.</span>
</p>

<p class="p_Text"><span class="f_Text">Encapsulation is the ability
to hide the implementation details when the open interfaces to
user-defined type is provided. In MQL5, as well as in C++, class
and structure definitions (<a href="classes.htm#class" class=
"topiclink">class</a> and <a href="classes.htm" class=
"topiclink">struct</a>) are used for the encapsulation provisions
in combination with access keywords</span> <span class="f_Text"
style="color: #0000ff;">private</span><span class="f_Text">,</span>
<span class="f_Text" style="color: #0000ff;">protected</span>
<span class="f_Text">and</span> <span class="f_Text" style=
"color: #0000ff;">public</span><span class="f_Text">.</span></p>

<p class="p_Text"><span class="f_Text">The</span> <span class=
"f_Text" style="color: #0000ff;">public</span> <span class=
"f_Text">keyword shows that access to the members that stand behind
it is open without restrictions. Without this keyword, class
members are locked by default. Private members are accessible only
by member functions only of its class.</span></p>

<p class="p_Text"><span class="f_Text">Protected class functions
are available to class functions not only in its class, but also in
its inheritor classes. Public class functions are available for any
function within the scope of the class declaration. The protection
makes possible to hide part of the class implementation, thus
preventing unexpected changes in the structure of data. Access
restriction or data hiding is a feature of the object-oriented
programming.</span>
</p>

<p class="p_Text"><span class="f_Text">Usually, class functions are
protected and declared with the</span> <span class="f_Text" style=
"color: #0000ff;">protected</span> <span class="f_Text">modifier,
the reading and writing of the values are performed by using
special so-called set-and get-methods that are defined by
the</span> <span class="f_Text" style=
"color: #0000ff;">public</span> <span class="f_Text">access
modifier.</span></p>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CPerson</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">protected</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;name</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetName(</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;n){m_name=n;}</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;sets&nbsp;name</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetName(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">&nbsp;(m_name);}&nbsp;</span><span class=
"f_CodeExample" style=
"color: #808080;">//&nbsp;returns&nbsp;name</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_Text"><span class="f_Text">&nbsp;</span>
</p>

<p class="p_Text"><span class="f_Text">This approach offers several
advantages. First, by function name we can understand what it does
- sets or gets the value of a class member. Secondly, perhaps in
the future we will need to change the type of the m_name variable
in the CPerson class or in any of its derivative classes.</span>
</p>

<p class="p_Text"><span class="f_Text">In this case, we'll need
just to change the implementation of functions SetName() and
GetName(), while objects of the CPerson class will be available for
using in a program without any code changes because the user will
not even know that the data type of m_name has changed.</span>
</p>

<p class="p_Text"><span class="f_Text" style=
"font-weight: bold;">Example:</span>
</p>

<div style=
"text-align: left; text-indent: 0px; border-color: #b3b3b3; border-style: solid; border-width: 1px; background: #fbf9f5; padding: 0px 0px 0px 0px; margin: 2px 17px 2px 17px;">
<table cellspacing="0" cellpadding="3" border="0" style=
"text-align: justify;border:none; border-spacing:0px;">
<tr style="text-align:left;vertical-align:top;">
<td style="vertical-align:top; padding:3px;">
<p class="p_CodeExample"><span class="f_CodeExample" style=
"color: #0000ff;">struct</span><span class=
"f_CodeExample">&nbsp;Name</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first_name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;name</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last_name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;last&nbsp;name</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">class</span><span class=
"f_CodeExample">&nbsp;CPerson</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">protected</span><span class=
"f_CodeExample">:</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="f_CodeExample"
style="color: #808080;">//&nbsp;name</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">public</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetName(</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;n);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetName(){</span><span class="f_CodeExample"
style="color: #0000ff;">return</span><span class=
"f_CodeExample">(m_name.first_name+</span><span class=
"f_CodeExample" style="color: #008080;">"&nbsp;"</span><span class=
"f_CodeExample">+m_name.last_name);}</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">private</span><span class=
"f_CodeExample">:</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetFirstName(</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;full_name);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetLastName(</span><span class="f_CodeExample"
style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;full_name);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;};</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">void</span><span class=
"f_CodeExample">&nbsp;CPerson::SetName(</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;n)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;m_name.first_name=GetFirstName(n);</span><br>
<span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;m_name.last_name=GetLastName(n);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;CPerson::GetFirstName(</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;full_name)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;pos=</span><span class="f_CodeExample" style=
"color: #0000ff;">StringFind</span><span class=
"f_CodeExample">(full_name,</span><span class="f_CodeExample"
style="color: #008080;">"&nbsp;"</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(pos&gt;0)&nbsp;</span><span class="f_CodeExample"
style="color: #0000ff;">StringSetCharacter</span><span class=
"f_CodeExample">(full_name,pos,0);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(full_name);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span><br>
<span class="f_CodeExample">&nbsp;</span><br>
<span class="f_CodeExample" style=
"color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;CPerson::GetLastName(</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;full_name)</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;{</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">string</span><span class=
"f_CodeExample">&nbsp;ret_string;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">int</span><span class=
"f_CodeExample">&nbsp;pos=</span><span class="f_CodeExample" style=
"color: #0000ff;">StringFind</span><span class=
"f_CodeExample">(full_name,</span><span class="f_CodeExample"
style="color: #008080;">"&nbsp;"</span><span class=
"f_CodeExample">);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">if</span><span class=
"f_CodeExample">(pos&gt;0)&nbsp;ret_string=</span><span class=
"f_CodeExample" style=
"color: #0000ff;">StringSubstr</span><span class=
"f_CodeExample">(full_name,pos+1);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">else</span><span class=
"f_CodeExample">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret_string=full_name;</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;&nbsp;</span><span class=
"f_CodeExample" style="color: #0000ff;">return</span><span class=
"f_CodeExample">(ret_string);</span><br>
<span class="f_CodeExample">&nbsp;&nbsp;}</span>
</p>
</td>
</tr>
</table>
</div>

<p class="p_BoldTitles"><span class="f_BoldTitles">See also</span>
</p>

<p class="p_SeeAlso"><span class="f_SeeAlso"><a href="types.htm"
class="topiclink">Data Types</a></span>
</p>
<br>
</div>

<script type="text/JavaScript">
var fe = FindFrame("toc", top);
if ((fe != null) && (chmtop.c2wtopf.jstree != null)) {
  if (chmtop.c2wtopf.FITEMS[chmtop.c2wtopf.pagenum] != chmtop.c2wtopf.pageid)
    chmtop.c2wtopf.jstree.OpenTreeNode("" + chmtop.c2wtopf.pageid);
}
</script>

<!-- CHM2WEB -->
<!-- DO NOT DELETE OR MODIFY THIS CODE WITHOUT 
     WRITTEN PERMISSION OF A!K RESEARCH LABS -->
<table width="100%" cellspacing="0" cellpadding="0" 
style="margin-top: 0pt; border-collapse: collapse;"> 
<tr> <td align="right" style="background-color:white; border-top: 1px solid gray;"> 
<a href="http://chm2web.aklabs.com" target="_blank" style="font-family: sans-serif;  font-size: 11px; text-decoration: none;"><font color="gray">Converted from CHM to HTML with <b>chm2web Pro 2.85 (unicode)</b></font></a>
</td></tr></table> 
<!-- /CHM2WEB -->

</body>
</html>
